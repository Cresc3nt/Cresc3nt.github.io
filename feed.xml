<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://cresc3nt.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://cresc3nt.github.io/" rel="alternate" type="text/html" hreflang="zh"/><updated>2025-10-26T17:37:14+00:00</updated><id>https://cresc3nt.github.io/feed.xml</id><title type="html">Yuxuan(黄钰轩)’s Homepage</title><subtitle>B.Eng. in IoT Engineering, NUAA. </subtitle><entry><title type="html">低轨卫星网络物联网相关论文簇</title><link href="https://cresc3nt.github.io/blog/2025/leo-iot/" rel="alternate" type="text/html" title="低轨卫星网络物联网相关论文簇"/><published>2025-10-20T11:00:00+00:00</published><updated>2025-10-20T11:00:00+00:00</updated><id>https://cresc3nt.github.io/blog/2025/leo-iot</id><content type="html" xml:base="https://cresc3nt.github.io/blog/2025/leo-iot/"><![CDATA[<h2 id="spectrumize-spectrum-efficient-satellite-networks-for-the-internet-of-things">Spectrumize: Spectrum-efficient Satellite Networks for the Internet of Things</h2> <p><strong>Spectrumize：面向物联网的频谱高效卫星网络<d-cite key="spectrumize2024"></d-cite> (NSDI 2024)</strong></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-20-leo-iot/spectrumize-480.webp 480w,/assets/img/blogs/2025-10-20-leo-iot/spectrumize-800.webp 800w,/assets/img/blogs/2025-10-20-leo-iot/spectrumize-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-20-leo-iot/spectrumize.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 端到端卫星物联网通信 </div> <h3 id="1-1-摘要">1-1 摘要</h3> <p>低地球轨道卫星星座正日益被用于为低功耗户外物联网（IoT）设备提供连接。这一趋势得益于低成本、低复杂度的皮卫星的发展，这类卫星易于发射，无需依赖地面网关即可实现全球覆盖。作者基于部署一颗物联网卫星的实际经验，揭示了星地通信中的瓶颈问题，具体表现为链路预算低、卫星运动以及数据包碰撞等挑战。为应对这些问题，作者设计了一类新技术，利用卫星运动引起的多普勒频移作为独特特征，即使在低信噪比和存在碰撞的情况下，也能实现数据包的检测与解码。这些技术被集成到名为 Spectrumize 的系统中，并通过仿真与真实部署进行了性能评估。评估结果表明，与传统方法相比，Spectrumize 在数据包检测方面性能提升达 3 倍，平均解码准确率超过 80%。</p> <h3 id="1-2-引言">1-2 引言</h3> <p>“新航天”时代的兴起推动了面向物联网设备的小型卫星的广泛应用。这类卫星可在地面网络无法覆盖的区域（例如农田、森林、海洋等）提供连接服务。凭借体积小、硬件复杂度低等优势，这些卫星易于制造并送入轨道，从而促使物联网卫星产业迅速发展。目前已有十余家公司正在大力部署由数百颗此类小型物联网卫星组成的星座，采用“直连卫星”（Direct-to-Satellite, DtS）模式提供连接服务。该模式允许地面物联网设备直接将数据上传至轨道上的卫星，而无需部署地面网关。卫星收集数据后，再将其下传至具备地面回传能力的地面站，以便进行云端数据聚合。</p> <blockquote class="block-tip"> <p>📶 <strong>终端设备特性</strong><br/> 地面 IoT 设备使用小型天线（全向或有限方向性，如 Yagi 天线），便于在任意地点部署。<br/> 设备功耗低、成本低，符合窄带物联网（NB-IoT 类）应用场景（如农田、海洋、森林等无地面网络覆盖区域）。</p> </blockquote> <p>物联网卫星的核心目标是实现低成本，这使其区别于传统的对地观测或宽带通信卫星。这类卫星体积更小，并针对物联网应用进行了优化——通常仅需数百比特每秒的低数据速率，工作带宽约为百千赫兹量级。因此，物联网卫星配备的是简单的通信硬件，例如半波偶极子电缆天线，不具备波束成形能力，也不支持星间链路。同样，地面站和地面物联网设备也设计得尽可能简单，可使用全向或有限方向性的小型天线在任意地点部署。总体而言，物联网卫星的连接架构与硬件设计与当前最先进的地面物联网网络非常相似。</p> <blockquote class="block-tip"> <p>📻 <strong>通信频段与调制方式</strong><br/> 虽然文章重点在卫星到地面站的下行链路，但也提及了终端与卫星间的通信参数（Section 2.3）：<br/></p> <ul> <li>使用 401–402 MHz 频段（该频段被分配用于地球探测卫星、气象辅助等）。<br/></li> <li>虽未详述终端上行的具体调制方式，但指出卫星搭载了 Semtech SX1302 LoRa 网关芯片，表明其支持 LoRa 调制，这是当前卫星 IoT 行业主流方案（如 Swarm、FOSSA 等公司均采用 LoRa）。</li> </ul> </blockquote> <p>作者与物联网卫星公司 FOSSA Systems 合作，发射了一颗物联网皮卫星，并以此研究这一新兴网络类型的特点。作者利用该公司位于西班牙的地面站从卫星下载数据。令人意外的是，尽管使用了标准硬件，作者在卫星到地面站的下行链路中仍遭遇了严重的丢包问题。具体而言，卫星发送的数据包中有 65.28% 未能被地面站成功解码。</p> <p>本文源于实现低成本、低功耗物联网卫星稳健下行链路所面临的挑战。作者观察到，以下三个问题限制了物联网卫星下行传输的解码能力：</p> <p><strong>挑战一：链路预算低</strong><br/> 由于卫星与地面之间距离较远（约 500 公里）、卫星天线方向性有限、地面站缺乏波束成形能力以及大气衰减等因素，星地通信的链路预算较低。作者观测到，在卫星过境期间，平均链路预算仅为 −133.78 dBm。受限于卫星的功耗约束和监管对地面功率通量密度的限制，无法通过提高发射功率来改善链路。尽管在地面部署高端设备（如相控阵天线）可提升链路预算，但这类设备体积庞大且成本高昂，尤其对于工作在 VHF 和 UHF 等较低频段的物联网卫星而言并不现实。低链路预算导致频繁丢包和低数据速率，对下行链路尤为不利，因为地面站还会受到地面通信带来的噪声底抬升影响。</p> <p><strong>挑战二：数据包碰撞与频谱效率低下</strong><br/> 低轨物联网卫星天线方向性有限，其信号覆盖范围（即“足迹”）可达到上百万平方公里。由于多颗卫星在同一频段工作，当它们的足迹在地面站位置重叠时，传输信号会发生碰撞。例如，Swarm 星座包含 170 多颗卫星，位于极地地区的地面站（因轨道动力学特性，该区域卫星过境频繁）平均同时处于 7 颗卫星的视野内，从而面临高碰撞率。为避免碰撞，当前通常采用预先调度机制，即使多颗卫星同时可见，地面站也仅与其中一颗通信。这种调度策略虽然必要，却显著降低了频谱效率。</p> <p><strong>挑战三：卫星运动</strong><br/> 星地链路质量会因两类运动而波动：一是卫星轨道运动导致星地距离变化；二是卫星局部运动（通常表现为翻滚）。后者在小型物联网卫星中尤为明显，因其缺乏姿态控制系统来稳定自身运动。大型宽带卫星可通过实时速率自适应应对该问题，但对数据速率低、带宽受限的物联网卫星而言，这一挑战更为严峻。尤其在用于卫星数据下载的纯接收型分布式地面站中，该问题更加突出。因此，卫星往往选择保守的传输速率，以确保即使在最低信噪比条件下也能通信，但这导致频谱效率次优。</p> <p>针对上述问题，本文提出了 Spectrumize，一种旨在提升物联网卫星下行链路频谱效率的新方法，从而增强基于卫星的物联网网络的可靠性、鲁棒性与可扩展性。Spectrumize 的核心思想并非将卫星运动视为障碍，而是将其作为物联网卫星网络的独特优势加以利用。其基本原理在于：卫星运动具有可预测性，由此产生的多普勒频移对每颗卫星而言都是唯一的。作者将这种多普勒频移的时变特性作为“签名”，类似于 CDMA 中的扩频码，从而提升信噪比并解复用同时传输的信号，最终实现更高的频谱效率。</p> <blockquote class="block-tip"> <p>🔁 <strong>数据流向</strong><br/> IoT 设备 → 卫星：设备在卫星过顶时，直接发送数据（上行）。<br/> 卫星 → 地面站：卫星存储数据，并在飞越合作地面站时下传（下行）。<br/> 地面站 → 云端：通过地面回传网络（terrestrial backhaul）将数据送至云平台进行聚合分析。</p> </blockquote> <h3 id="1-3-解决方案">1-3 解决方案</h3> <p><strong>挑战一：链路预算低（Low Link Budget）</strong><br/></p> <p>问题：由于卫星距离远、天线无方向性、功率受限以及地面噪声干扰，接收信号信噪比（SNR）极低，导致传统包检测方法（如单前导码相关）失效。</p> <p>解决方法：</p> <ul> <li>利用周期性传输结构：IoT 卫星在一次过境中会按固定间隔连续发送多个数据包（如 $N$ 个），形成一个周期性前导码序列。</li> <li>构建虚拟长前导码：将这 $N$ 个前导码拼接成一个“虚拟前导码序列”，与接收信号做相关运算，通过非相干累加提升相关峰值，使原本淹没在噪声中的包变得可检测。</li> <li>结合多普勒校正：在构建虚拟前导码时，预先根据卫星轨道参数（TLE）计算并补偿每包对应的多普勒频移，确保各包前导码在频域对齐，实现有效累加。</li> </ul> <p><strong>挑战二：数据包碰撞与频谱效率低下（Packet Collisions）</strong></p> <p>问题：多颗卫星覆盖区域重叠，若同时向地面站发送数据，会发生同频碰撞；现有系统通过调度避免并发，牺牲了频谱效率。</p> <p>解决方法：</p> <ul> <li>将多普勒频移视为“物理层签名”：每颗卫星因轨道位置和速度不同，在地面站观测到的多普勒频移随时间变化的轨迹是唯一的，类似于 CDMA 中的扩频码。</li> <li>利用多普勒签名解复用：在接收端，用目标卫星的多普勒轨迹对接收信号进行补偿，使目标信号相干增强，而其他卫星信号因多普勒不匹配而被抑制。</li> <li>结合 LoRa 碰撞解析算法（如 CIC）：在多普勒预处理后，再使用现有 LoRa 多包接收技术进一步分离符号。</li> </ul> <p><strong>挑战三：卫星运动（Satellite Motion）</strong></p> <p>问题：卫星轨道运动引起距离变化，翻滚（tumbling）导致天线指向不稳定，传统系统只能采用保守低速率传输。</p> <p>解决方法：</p> <ul> <li>变“问题”为“资源”：不再将卫星运动视为干扰源，而是主动利用其产生的时变多普勒频移作为识别特征。</li> <li>预测性建模：基于 TLE 精确预测每颗卫星在过境期间的多普勒曲线，用于接收端信号处理。</li> <li>鲁棒性设计：算法能容忍载波频偏（CFO）、包间隔抖动等硬件误差，通过迭代搜索最优参数提升检测鲁棒性。</li> </ul> <h3 id="1-4-总结">1-4 总结</h3> <p>Spectrumize 的核心思想是：将卫星运动产生的多普勒频移从“障碍”转变为“资源”，通过“多普勒签名 + 周期性前导码累加 + 碰撞解复用”三位一体的技术，同时解决了低链路预算、包碰撞和卫星运动三大挑战，实现了3 倍于传统方法的包检测性能和高鲁棒性的频谱高效下行链路。</p> <hr/> <h2 id="sateriot-high-performance-ground-space-networking-for-rural-iot">SateRIoT: High-performance Ground-Space Networking for Rural IoT</h2> <p><strong>SateRIoT：面向农村物联网的高性能天地一体化网络<d-cite key="10.1145/3636534.3690659"></d-cite> (MobiCom 2024)</strong></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-20-leo-iot/SateRIoT-480.webp 480w,/assets/img/blogs/2025-10-20-leo-iot/SateRIoT-800.webp 800w,/assets/img/blogs/2025-10-20-leo-iot/SateRIoT-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-20-leo-iot/SateRIoT.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> SateRIoT 链路示例 </div> <h3 id="2-1-摘要">2-1 摘要</h3> <p>农村物联网系统连接偏远地区的传感器与执行器，在精准农业和环境监测等领域发挥着关键作用。由于这些地区缺乏用于回传的网络基础设施，卫星物联网技术提供了一种具有成本效益的连接解决方案。然而，当前的卫星物联网架构往往难以实现高性能，主要受限于链路在时间和空间上的动态挑战。本文提出了 SateRIoT，一种新型网络架构，通过时间维度的链路估计与空间维度的链路共享，充分挖掘低成本近地轨道（LEO）物联网卫星与地面低功耗广域（LPWA）物联网技术在农村地区的潜力。</p> <p>首先，作者引入了一种突发性链路模型，用于预测在一次传输窗口内可成功发送的数据包数量，从而减少因上行链路失败而导致的能量浪费。此外，作者通过选择更具信息量的特征并优化窗口长度，进一步增强了该模型的性能。同时，作者设计了一种多跳泛洪协议，使网关能够在网络中缓存并共享数据包，并通过优先级数据队列避免重复传输。</p> <p>作者基于商用现成（COTS）的物联网卫星设备与 LoRa 无线电实现了 SateRIoT，并通过真实部署与实际采集的数据轨迹对其性能进行了评估。结果表明，SateRIoT 能使单个网关的能量消耗降低至原来的约三分之一（即节能 3.3 倍）；同时，单个数据包的端到端延迟最多可降低 5.6 倍，整体吞吐量提升 1.9 倍。</p> <h3 id="2-2-引言">2-2 引言</h3> <p>物联网正在深刻改变人类感知和交互物理世界的方式，在精准农业、环境监测、森林火灾预防等多个领域展现出巨大价值。低功耗广域（LPWA）物联网技术（例如 LoRa）因其覆盖范围广、功耗低等特性，非常适合农村区域的大规模部署。这类技术的典型网络架构由若干具备回传链路的网关和大量由这些网关服务的传感器节点组成。然而，农村地区普遍缺乏城市中常见的网络基础设施（如 5G、LTE 或有线网络），新建回传链路的成本效益成为一大挑战。</p> <p>近年来，近地轨道（LEO）卫星展现出为地面卫星无线电提供全球互联网接入的能力。地面设备可通过空间上行链路将数据包发送至 LEO 卫星，再由卫星经空间下行链路转发至若干与互联网相连的地面站。利用现有 LEO 卫星实现“直连卫星”（Direct-to-satellite, DtS）物联网，相比在地面新建回传链路，是一种更具成本效益的替代方案。例如，SpaceX 旗下的 Swarm 公司提供商用现成的直连卫星物联网服务，全球连接费用仅为每月每链路 5 美元。</p> <p>Swarm 使用超小型 LEO 卫星，轨道高度为 462 或 510 公里。然而，地面卫星无线电与卫星之间的连接受多种因素影响，例如天气、卫星姿态、天线相对位置等。根据作者的实测研究，在 Swarm 卫星过境期间，有效连接时间通常非常稀疏：在 80% 的情况下，总连接时间不足卫星过境时长的 20%。此外，Swarm-M138 无线电的数据速率低至 1 kbps。这种稀疏的连接窗口与有限的链路容量促使作者重新思考天地一体化物联网架构，以在保证能效和低延迟的同时，充分挖掘 LEO 物联网卫星网络的回传吞吐潜力。</p> <p>如图左侧所示，现有方案通常为每个 LoRa 网关配备一个卫星无线电模块，当卫星过境时，网关将收集到的传感数据转发至互联网。然而，这种直观的架构因以下两类时空链路挑战而难以实现高性能：</p> <p><strong>挑战一：短窗口内上行链路的高丢包率。</strong><br/> 当网关与卫星建立连接后，上行链路仍可能因信号质量不佳而丢包，导致网关在固定重传次数下浪费大量能量。在偏远地区（如农田或森林），为 LoRa 网关部署稳定电源十分困难，通常依赖小型太阳能板供电，但其在阴雨、降雪或夜间等条件下难以持续供能，因此能效至关重要。实测表明，Swarm-M138 无线电在 1 kbps 发射模式下的能耗高达 7.97 mJ/bit，是 LoRa（SF10，976 bps）的 408 倍。Swarm 协议规定，一旦接收到卫星下发的数据信标，地面设备必须进行 6 次强制传输尝试，无论实际链路质量如何。然而，在如此短暂的传输窗口内，即便成功接收到信标，数据包仍可能无法送达卫星，导致不必要的能量浪费。</p> <blockquote class="block-tip"> <p>📡 信标（beacon） 是由 LEO 卫星主动广播的一种控制消息，用于协调地面终端（如网关）与卫星之间的通信。<br/> 文中出现了两类信标：非数据信标（Non-data Beacon）用于下行链路控制、同步或状态通告，不会触发地面设备发送数据；数据信标（Data Beacon）通知地面设备“现在可以上传数据”，是启动上行传输的必要前提。</p> </blockquote> <p><strong>挑战二：空间分布网关连接时间的显著差异。</strong><br/> 由于 LoRa 网关在地理上分散部署，尽管它们都面临稀疏连接问题，但各自的有效连接时间却差异显著。实测数据显示，在同一颗卫星过境期间，四个网关的数据上传时间通常互不重叠，多数情况下仅有一个网关处于有效连接状态。若每个网关仅传输自身收集的数据，则那些连接时间充足、传输能力有余的网关在传完本地数据后将处于空闲状态，而其他连接时间不足的网关则可能积压大量待传数据，从而降低整体网络吞吐量。</p> <p>为应对上述挑战，作者提出了 SateRIoT——一种融合时间链路估计与空间链路共享的新型网络架构，旨在充分利用 Swarm 回传链路的能力，实现面向农村地区的高性能天地一体化物联网。该架构通过估计链路的时间行为来确定最优传输数据包数量以节省能量，并允许网关利用自身空闲的连接时间帮助其他网关传输数据，从而提升整体吞吐量并降低端到端延迟。</p> <p>如图右侧所示，在 SateRIoT 中，每个 LoRa 网关不仅缓存自身生成的数据，还缓存来自其他网关的共享数据。当某个网关判断当前窗口可成功传输 $k$ 个数据包时，它将立即从自身或他网关的数据中选择 $k$ 个进行发送。SateRIoT 的设计需解决三个关键问题，以在提升网络性能的同时控制额外的计算与维护开销：</p> <blockquote class="block-tip"> <p>💡 $k$ 值由一个轻量级的“突发性链路模型”在接收到卫星 ACK 后动态预测得出，该模型基于物理层（如 RSSI/SNR）、环境（如天气、仰角）和协议特征（如信标间隔），在经验优化的 120 秒窗口内估计当前链路可成功传输的数据包数量。</p> </blockquote> <p>首先，Swarm 链路质量受大气、轨道等多种因素影响，特征空间庞大，难以在模型精度与实时性之间取得平衡。作者选择优先保障估计精度，并通过轻量级集成学习模型加以优化。具体而言，作者设计了一种突发性链路模型，用于刻画链路的时间行为，并在一个链路质量稳定的自适应传输窗口内，预测可成功传输的数据包数量。为在有限时间内完成建模与调度，作者提出了一种基于确认应答（ACK）触发的轻量级集成学习机制。</p> <p>其次，模型参数的选择对实际性能至关重要。一方面，需从大量可用特征中筛选出对链路估计最具信息量的一小组特征；另一方面，需自适应地确定合适的传输窗口长度。窗口过长会因链路质量波动而降低估计准确性，而窗口过短则会因频繁建模与数据同步增加能耗。此外，窗口长度还需与 Swarm 协议的数据拉取周期对齐。为此，SateRIoT 精心融合了物理层、商用卫星物联网协议及环境信息中的关键特征，并采用经验方法确定最优窗口长度——即在保证链路质量一致性的前提下尽可能延长窗口，以节省能量。</p> <p>第三，在链路共享机制中，网关需从其他网关获取数据，但何时以及如何获取是一个挑战。由于连接时间稀疏，无法在每次窗口开启前使用能耗较高的树状路由协议拉取数据。鉴于 LoRa 无线电的能耗远低于卫星无线电，作者采用多跳泛洪协议，利用广播快速实现全网数据一致性。具体而言，当某网关从传感器收集到新数据后，即启动泛洪过程，其他网关逐跳转发，直至所有网关均收到副本。此外，为避免并发泛洪导致的冲突，系统采用载波侦听退避机制。同时，为防止多个网关同时传输造成重复，作者设计了优先级队列：本地生成的数据优先传输，中继数据则进行随机排序；并通过信标锁定待传数据包，实现队列与泛洪服务的同步。</p> <p>作者在四台嵌入商用 Swarm M138 与 LoRa SX1262 无线电芯片的网关上实现了 SateRIoT，并在覆盖 9 平方公里的大学农场中进行了真实部署评估。此外，还基于 12 个网关规模的轨迹驱动仿真进行了扩展实验。结果表明，SateRIoT 在实现相当吞吐量的同时，单个网关能耗最多降低 3.3 倍；数据包延迟最多减少 5.6 倍，吞吐量提升 1.9 倍。</p> <p>本文的主要贡献总结如下：</p> <ul> <li>通过真实部署对 LEO 物联网卫星链路特性进行了实证测量，揭示了其在时空维度上的三个关键行为特征，指出了直接采用直连卫星物联网技术难以实现高性能农村物联网的根本障碍；</li> <li>设计了 SateRIoT 新型网络架构，包含精心设计的卫星链路估计与共享模块，支持全网数据共享与链路感知的数据传输，显著提升网络性能；</li> <li>基于商用 LoRa 网关与 Swarm 无线电完整实现了 SateRIoT，并通过真实部署与轨迹驱动仿真对其效率进行了全面评估，验证了其在能效、延迟与吞吐量方面的显著优势。</li> </ul> <h3 id="2-3-总结">2-3 总结</h3> <p>SateRIoT 通过 时间链路估计 + 空间链路共享 的协同设计，在不依赖额外基础设施的前提下，显著提升了农村卫星物联网的能效与性能，为低成本、广覆盖的天地一体化 IoT 提供了实用化解决方案。</p> <hr/> <h2 id="cosmac-constellation-aware-medium-access-and-scheduling-for-iot-satellites">CosMAC: Constellation-Aware Medium Access and Scheduling for IoT Satellites</h2> <p><strong>CosMAC：面向物联网卫星的星座感知介质访问与调度机制<d-cite key="10.1145/3636534.3690657"></d-cite> (MobiCom 2024)</strong></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-20-leo-iot/CosMAC-480.webp 480w,/assets/img/blogs/2025-10-20-leo-iot/CosMAC-800.webp 800w,/assets/img/blogs/2025-10-20-leo-iot/CosMAC-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-20-leo-iot/CosMAC.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> CosMAC 系统和数据流 </div> <h3 id="3-1-摘要">3-1 摘要</h3> <p>皮卫星（picosat）星座有望成为物联网（IoT）设备的默认连接解决方案。这类星座依赖大量小型皮卫星，以低数据速率提供全球即插即用的连接能力，且无需地面网关。然而，随着皮卫星星座规模的扩大，其传统的介质访问设计（原本针对单颗或少量卫星优化）面临新的瓶颈。</p> <p>作者提出了 CosMAC——一种面向皮卫星网络的新型星座级介质访问与调度系统。CosMAC 包含一种新的重叠感知上行链路介质访问机制（用于物联网设备到皮卫星的通信）以及一种新的网络层调度机制（用于卫星到地面站的下行链路流量调度）。作者通过三颗在轨皮卫星的实际测量数据，以及针对包含 173 颗皮卫星、支持 10 万设备的大规模轨迹驱动仿真，对 CosMAC 进行了实证评估。结果表明，与现有最先进的卫星介质访问方案相比，CosMAC 可将整体网络吞吐量提升最多达 6.5 倍。</p> <h3 id="3-2-引言">3-2 引言</h3> <p>低地球轨道（LEO）中的皮卫星星座有望为物联网设备提供普适的即插即用连接能力。皮卫星（如下图所示）体积小巧，采用现成的低复杂度硬件构建，因此制造和发射成本低廉。借助皮卫星星座，用户无需部署网络回传、供电基础设施或网关即可启用物联网连接。兼容皮卫星的物联网设备只需开机即可接入互联网。受此愿景驱动，已有十余家公司部署了数百颗皮卫星的星座，并已提供商业化的物联网连接服务。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-20-leo-iot/picosat-480.webp 480w,/assets/img/blogs/2025-10-20-leo-iot/picosat-800.webp 800w,/assets/img/blogs/2025-10-20-leo-iot/picosat-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-20-leo-iot/picosat.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 皮卫星 </div> <blockquote class="block-tip"> <p>📋 <strong>皮卫星参数</strong><br/> 尺寸: 10x5x5 cm$^3$<br/> 高度: 约 500 Km<br/> 平均功率: 1.67 W<br/> 无线电: SX1262 (LoRa)<br/> 上行链路: 401.3 MHz<br/> 下行链路: 401.1 MHz<br/> 信标: 401.7 MHz<br/> 带宽: 125 KHz<br/> 天线: 全向天线</p> </blockquote> <p>目前，物联网与皮卫星之间的主流连接模式是“直连卫星”（Direct-to-satellite, DtS）。在该模式中，物联网设备首先接收来自头顶皮卫星的信标，然后直接向轨道上的皮卫星发送数据（如下图所示）。皮卫星接收到数据后，会在合适时机将数据转发至地面站；地面站再通过互联网等地面网络将数据传至云端进行聚合。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-20-leo-iot/dataflow-480.webp 480w,/assets/img/blogs/2025-10-20-leo-iot/dataflow-800.webp 800w,/assets/img/blogs/2025-10-20-leo-iot/dataflow-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-20-leo-iot/dataflow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 物联网-皮卫星网络数据流 </div> <p>物联网-皮卫星网络在功耗约束、回传基础设施和移动性方面与地面物联网网络存在显著差异。例如，在 LoRaWAN 等地面物联网网络中，设备与具备稳定电源和回传能力的固定网关通信。而在皮卫星网络中，物联网设备直接与皮卫星通信。由于皮卫星体积微小，无法配备大型太阳能板和大容量电池，因此功耗受限。此外，皮卫星在低轨高速运动，与任一地面设备的连续通信时间通常不超过十分钟。这导致皮卫星与地面站之间的回传连接具有间歇性，且皮卫星与物联网设备之间的关联关系快速变化。</p> <p>简言之，与地面网络中“受限的物联网设备 + 资源充足的网关”模式不同，皮卫星网络必须同时应对物联网设备和皮卫星（作为网关）两端的资源约束。</p> <p>随着皮卫星网络规模的扩大，此类网络面临以下关键挑战（如下图所示）：</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-20-leo-iot/challenges-480.webp 480w,/assets/img/blogs/2025-10-20-leo-iot/challenges-800.webp 800w,/assets/img/blogs/2025-10-20-leo-iot/challenges-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-20-leo-iot/challenges.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 物联网-皮卫星网络挑战 </div> <p><strong>挑战 1：卫星上行链路冲突</strong><br/> 物联网设备向皮卫星的上行传输频繁发生冲突。这是因为皮卫星覆盖范围极大——单颗卫星可接收数百万平方公里区域内成千上万台设备的信号。设备数量庞大而频谱资源有限，使得卫星难以通过时分或频分复用显式协调介质访问。此外，这些设备由于地面距离和障碍物遮挡，无法侦听彼此的传输，也无法采用基于载波侦听的介质访问机制。同时，物联网设备使用全向天线，无法将信号定向发送至特定卫星，因此只能依赖 Aloha 等随机接入协议。此类传输会在多颗卫星处产生干扰，导致单次传输引发多次冲突。尽管已有少量研究针对单颗卫星优化随机接入，但未考虑多颗卫星覆盖区域重叠带来的影响（如上图所示）。</p> <blockquote class="block-tip"> <p>💡 在上行传输中，IoT 设备无法判断传输是否成功，在卫星端可以通过 CAD（Channel Activity Detection）间接判断：如果检测到信道有 LoRa 信号（CAD 为正），但无法解码出有效数据包，则推测发生了碰撞（即多个设备同时发送导致失败）；如果长时间无 CAD 信号，则判断为信道空闲。</p> </blockquote> <p><strong>挑战 2：确认机制与流控</strong><br/> 传统网络（如 Wi-Fi 和 RFID）依赖网关反馈（例如确认应答）来控制发送速率。但在物联网-皮卫星网络中，物联网流量稀疏，通常每天仅发送几十个数据包。因此，设备从一次传输中获得的反馈（通过确认应答）在下次传输时早已过时。此外，由于任一物联网设备与某颗卫星的接触时间仅有几分钟，后续传输往往由不同卫星接收。在此约束下，需要设计新的机制来调整物联网设备的数据发送速率。</p> <p><strong>挑战 3：地面站接触调度</strong><br/> 传统卫星使用相控阵或大型抛物面天线，可将信号波束成形至特定地面站。当多颗卫星与多个地面站相互可见时，集中式调度器会决定哪些卫星应与哪些地面站建立一对一链路。已有大量研究致力于优化此类链路选择。然而，皮卫星使用全向天线，无法实现波束成形以支持一对一通信。此外，皮卫星越来越多地依赖分布式地面站架构（如 TinyGS），全球已部署超过 1000 个小型地面站。因此，皮卫星与密集部署的地面站之间形成“一对多”连接：当一颗卫星发送信号时，其信号会干扰多个地面站，使其无法接收其他卫星的信号。现有调度算法未考虑此类“一对多”的干扰模式。</p> <blockquote class="block-tip"> <p>💡 在下行传输中，卫星也无法判断传输是否成功，但地面站收到数据后会通过互联网上传至云端，云端可统计哪些数据包缺失，从而间接推断下行失败（但无法实时反馈给卫星）。</p> </blockquote> <p>针对上述挑战，作者提出了 CosMAC，一种旨在提升皮卫星网络可扩展性、鲁棒性与性能的新系统。CosMAC 包含一种新的重叠感知介质访问方案和一种新颖的调度架构。该系统无需对卫星或地面站进行硬件改动，仅在软件/固件层面运行。与以往仅优化单颗卫星或单个地面站的设计不同，CosMAC 采用独特的星座级协同方法，揭示了新的优化机会。其设计包含三个关键组件：</p> <p><strong>（ⅰ）缓解上行冲突</strong>：作者观察到，在物联网-皮卫星网络中，不同设备单次传输的代价并不相同。例如，位于多颗卫星覆盖重叠区域的设备，其传输会阻止这些卫星接收其他设备的数据。基于此，作者提出一种新的重叠感知随机接入协议，对这类“高干扰设备”施加惩罚。这与地面网络中的做法不同——在地面网络中，此类惩罚会导致重叠区域设备永久饥饿；但在卫星网络中，由于轨道运动，卫星覆盖区域及重叠区会随时间在地球表面移动，因此该方法可最小化冲突并提升整体上行吞吐量。</p> <blockquote class="block-tip"> <p>📉 每个 IoT 设备在每次需要传输数据时，都会实时计算其传输概率。当一颗 IoT 设备同时收到多颗卫星的信标时，会根据信标数量的大小对自身进行“惩罚”，也就是降低自身的传输概率。由于低轨卫星的高动态性，卫星的覆盖“足迹”（footprint）和重叠区域随时间快速移动，所以并不需要担心设备永久饥饿。</p> </blockquote> <p><strong>（ⅱ）动态流控</strong>：由于设备数据生成速率可变（例如事件驱动流量），需定期调整其发送速率。为以最小开销实现该目标，作者设计了一种协同流控机制，利用现成皮卫星发送的信标提供反馈。皮卫星通过持续监测冲突情况判断是否需要设备降低发送速率，并在周期性信标消息中嵌入“退避”信号（或反之）。</p> <p><strong>（ⅲ）一对多调度</strong>：CosMAC 设计了一种适用于卫星与地面站“一对多”连接的新调度算法。该算法确保同时传输的两颗卫星各自至少拥有 $K$ 个无重叠（即无干扰）的地面站。通过该目标，CosMAC 在优化下行调度时兼顾了网络可靠性与鲁棒性。作者将该调度问题建模为图论中的最大权独立集问题（已知为 NP 难问题），并采用随机近似算法求解最终调度方案。该建模特别强调优先选择高信道容量与高可达数据速率的链路，同时考虑接收分集以保障可靠性。</p> <blockquote class="block-tip"> <p>💡 调度器确保每颗卫星的数据同时被至少 $K \geqslant 2$ 个地理分散的地面站接收，这些地面站之间距离 &gt; $d_{min}$（如 1 km），使得局部干扰（如天气、遮挡）不会同时影响所有接收点，只要任一地面站成功接收，数据就算送达。</p> </blockquote> <p>为评估 CosMAC，作者构建了一个涵盖真实皮卫星部署与大规模仿真的综合研究平台。该平台包括三颗在轨皮卫星（与商业物联网皮卫星服务商 FOSSA Systems 合作发射）、两个地面站及多个物联网节点。此外，作者还开发了名为 CosmicBeats 的开源轨迹驱动仿真器，其模型基于真实测量数据，并已公开发布。在包含 173 颗卫星、10 万设备和 1048 个地面站的仿真中，CosMAC 相比现有最先进基线方案，端到端吞吐量提升了 6.5 倍。</p> <p>CosMAC 的主要贡献包括：</p> <ul> <li>提出一种新的星座感知随机接入上行技术，提升净上行吞吐量；</li> <li>设计一种兼顾性能与可靠性的新型卫星-地面站下行调度器；</li> <li>构建包含三颗皮卫星、两个地面站及多个物联网节点的真实研究平台；</li> <li>基于真实测量数据，开发首个面向物联网皮卫星网络的数据驱动开源仿真器 CosmicBeats，并对 CosMAC 进行大规模评估。</li> </ul> <h3 id="3-3-总结">3-3 总结</h3> <p>CosMAC 是一种面向物联网皮卫星星座的星座级介质访问与调度系统，通过重叠感知上行接入和一对多下行调度，将端到端吞吐量最高提升 6.5 倍。</p> <hr/> <h2 id="b2lora-boosting-lora-transmission-for-satellite-iot-systems-with-blind-coherent-combining">B2LoRa: Boosting LoRa Transmission for Satellite-IoT Systems with Blind Coherent Combining</h2> <p><strong>$B^2$LoRa：基于盲相干合并的卫星物联网 LoRa 传输增强方法<d-cite key="zhao2025b2loraboostingloratransmission"></d-cite> (MobiCom 2025)</strong></p> <h3 id="4-1-摘要">4-1 摘要</h3> <p>随着近地轨道（LEO）卫星网络的快速发展，采用 LoRa 技术的卫星物联网系统正被广泛部署，以向低功耗、低成本的地面设备提供广域互联网服务。然而，从物联网卫星到地面设备的长距离传输及恶劣信道环境对链路可靠性构成了巨大挑战，这一点已通过作者搭建的真实系统测量结果得到验证。为应对该问题，作者提出了一种名为 $B^2$LoRa 的盲相干合并设计方案，用于提升 LoRa 传输性能。$B^2$LoRa 的核心思想是利用卫星物联网系统中固有的重复广播机制，在低功耗、低成本约束下实现相干合并——将不同时刻的重传视为来自天线阵列中不同天线单元发送的相同数据包。随后，问题转化为在频繁丢包情况下，对存在时间、频率和相位偏移的数据包进行细粒度对齐。为克服这一挑战，作者提出了三项关键技术：联合包嗅探、频偏对齐和相位漂移抑制，分别用于应对卫星物联网系统中典型的超低信噪比和多普勒频移。最终，基于真实部署环境的实验结果验证了 $B^2$LoRa 的高效性。</p> <h3 id="4-2-引言">4-2 引言</h3> <p>近年来，近地轨道（LEO）卫星网络迅速发展。得益于其全球覆盖能力，LEO 卫星已被用于连接广泛分布的物联网设备。多家公司已通过发射低成本纳卫星进入卫星物联网市场。LoRa 作为一种抗噪能力极强的低功耗无线协议，被广泛用于实现这些纳卫星与物联网设备之间的通信。</p> <p>尽管 LoRa 具备显著的抗噪能力，其链路仍面临超低信噪比和显著多普勒频移的问题，这源于长达 500 至 2500 公里的链路距离以及卫星的高速运动。为解决该问题，Semtech 开发了 LR-FHSS 作为 LoRa 的潜在替代方案。然而，其伪随机跳频机制给接收端带来了较大的计算开销，限制其仅适用于上行链路（设备到卫星），而 LoRa 下行链路的优化问题仍未解决。</p> <p>此外，卫星物联网中的下行链路极为频繁且关键。与地面网络相对静态的特性不同，快速变化的拓扑结构要求卫星不断发送下行信标，以通知物联网设备未来的过顶时间，从而及时建立上行链路。</p> <p>为应对这一挑战，现有物联网卫星通常采用重复广播机制（即定期重传），在一段时间内多次广播相同的下行信标，以提高接收成功率。然而，作者基于真实测试平台的测量结果表明，即便如此，丢包率仍高达 90%，说明不可靠的下行链路仍是卫星物联网系统中的重大问题。</p> <p>目前已有两项代表性研究工作：Spectrumize 和 XCopy。Spectrumize 面向卫星物联网中的地面站，通过消除预计算的多普勒频移来增强 LoRa 包检测能力。但该方法无法用于物联网设备，因为冷启动的物联网设备缺乏关于卫星动态星历的先验信息，无法预计算多普勒频移；此外，Spectrumize 也未解决低信噪比条件下的有效载荷解码问题。XCopy 则通过在地面网络中合并重传包来提升 LoRa 链路性能，但无法处理卫星物联网系统中不可避免的多普勒频移；在超低信噪比条件下，XCopy 也无法检测到足够数量的数据包以实现有效合并。</p> <p>针对上述问题，作者提出了一种名为 $B^2$LoRa 的盲相干合并设计，用于提升卫星物联网系统中的 LoRa 链路性能。该方案利用卫星物联网系统中的重复广播机制，在无需信道状态或卫星轨道位置先验知识的前提下，实现从卫星到物联网设备的重传包相干合并，从而提升接收端信噪比。然而，实现 $B^2$LoRa 面临两方面挑战：</p> <p>第一，长达 2500 公里的超长链路距离引入严重衰减。同时，卫星物联网的低功耗、低成本特性限制了传统信噪比增强手段（如提高发射功率或使用大规模天线阵列进行波束成形）的应用，导致信噪比极低，频繁发生丢包。</p> <p>第二，由于卫星高速轨道运动及硬件不完善，各数据包在到达时间、频率和相位上存在固有失配。真实测试平台的测量结果揭示了两个现象：（1）尽管卫星按固定周期发送，但地面设备接收到的数据包到达间隔并不规则，这是由传播时延变化和时钟不准确造成的；（2）多普勒频移呈现中心对称的变化模式——当卫星进入视距范围时频移达到峰值，在最大仰角时降至零，随后对称地变为负值。这种持续变化的多普勒频移可导致窄带协议（如 LoRa）的包间频偏高达数十千赫兹；同时，包内也存在频偏变化，进一步影响 $B^2$LoRa 性能。此外，卫星与设备之间的载波频率偏移（CFO）加剧了频偏问题。在卫星物联网系统中，当扩频因子（SF）设为 11、带宽（BW）设为 125 kHz 时，仅 8 微秒的时间偏差或 61 赫兹的频率偏差就可能导致破坏性合并。</p> <p>为应对上述挑战，作者随后提出了 $B^2$LoRa 的具体设计方案。</p> <h3 id="4-3-总结">4-3 总结</h3>]]></content><author><name></name></author><category term="科研"/><category term="低轨卫星网络"/><category term="物联网"/><category term="卫星物联网"/><summary type="html"><![CDATA[本文整理了截至 2025 年，低轨卫星网络中卫星物联网方向的代表性论文。]]></summary></entry><entry><title type="html">低轨卫星网络硬件 &amp;amp; 物理层相关论文簇</title><link href="https://cresc3nt.github.io/blog/2025/leo-hardware/" rel="alternate" type="text/html" title="低轨卫星网络硬件 &amp;amp; 物理层相关论文簇"/><published>2025-10-20T10:00:00+00:00</published><updated>2025-10-20T10:00:00+00:00</updated><id>https://cresc3nt.github.io/blog/2025/leo-hardware</id><content type="html" xml:base="https://cresc3nt.github.io/blog/2025/leo-hardware/"><![CDATA[<h2 id="hummingbird-energy-efficient-gps-receiver-for-small-satellites">Hummingbird: Energy Efficient GPS Receiver for Small Satellites</h2> <p><strong>Hummingbird：面向小型卫星的高能效 GPS 接收机<d-cite key="930e04c3acdb425c989aa6e85bd87710"></d-cite> (MobiCom 2020)</strong></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-20-leo-hardware/GPS-receiver-480.webp 480w,/assets/img/blogs/2025-10-20-leo-hardware/GPS-receiver-800.webp 800w,/assets/img/blogs/2025-10-20-leo-hardware/GPS-receiver-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-20-leo-hardware/GPS-receiver.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> GPS receiver </div> <h3 id="1-1-摘要">1-1 摘要</h3> <p>全球定位系统（GPS）是一种被广泛采用的定位技术。随着对小型卫星需求的不断增长，适用于卫星的低功耗 GPS 接收机也日益重要。为了支持许多前沿应用，精确获取卫星位置至关重要。然而，构建适用于低地球轨道（LEO）的低功耗 GPS 接收机面临重大挑战，这主要是由于小型卫星的高速运动（约 7.8 km/s）所致。虽然对接收机进行占空比控制（duty-cycling）是一种可行的节能方案，但 GPS 卫星与小型卫星之间的高相对多普勒频移会导致首次定位时间（TTFF）显著增加，从而提升能耗。此外，若 GPS 接收机随其所安装的小型卫星一起翻滚（tumbling），较长的 TTFF 可能因接收机天线方向混乱而无法获得有效定位。</p> <p>本文详细阐述了一种面向小型卫星应用的低成本、低功耗 GPS 接收机的设计，并提出了一种名为 $F^3$（Fast Fix and Forward/Propagate）的能效优化算法，以改善 TTFF——这是冷启动过程中能耗的主要来源。通过仿真以及搭载作者的 $\mu\text{GPS}$ 接收机的已发射纳卫星与高端 GPS 仿真器的在轨评估，作者证明：在导航精度仅轻微下降（约 10 米）的前提下，该算法可实现高达 96.16% 的能耗节省（仅消耗当前最先进方案约 $\frac{1}{25}$ 的能量），且 TTFF 最长不超过 33 秒。</p> <h3 id="1-2-引言">1-2 引言</h3> <p>位置信息在众多地面应用以及空间应用中都具有重要意义，包括卫星本身及其所提供的各类服务。全球定位系统（GPS）是一种被广泛接受的技术，用于低地球轨道（LEO）和中地球轨道（MEO）中的卫星确定自身位置。精确定位在多种卫星应用中至关重要，例如监视、测绘、海平面与森林及湖泊面积估算等。更前沿的应用，如冰川冰层厚度监测和污染物迁移追踪，同样依赖高精度的位置信息。</p> <p>事实上，卫星自身也需要获知其位置，以进行轨道修正与导航。在过去十年中，随着对小型卫星需求的不断增长，对低成本、低功耗星载 GPS 接收机的需求也日益迫切。大型卫星通常配备大型可展开太阳能帆板，其 GPS 子系统在功耗方面几乎不受限制；然而，对于微型化卫星而言，情况则截然不同。大多数小型卫星（如纳卫星、立方星、皮卫星和飞卫星）由于太阳能板面积受限，面临严重的能源约束，而 GPS 接收机被视为持续消耗大量能量的关键子系统之一，甚至在立方星中可能占用高达 20% 的整星功耗预算。</p> <blockquote class="block-tip"> <p>🛰️ 纳卫星（Nanosatellite）：质量在 1–10 千克之间的小型卫星 <br/> 🛰️ 立方星（CubeSat）：一种标准化的纳卫星，通常以“1U”（10 cm × 10 cm × 10 cm，约 1.33 千克）为基本单元，可组合成多单元结构 <br/> 🛰️ 皮卫星（Picosatellite）：质量在 0.1–1 千克之间的微型卫星 <br/> 🛰️ 飞卫星（Femtosatellite）：质量小于 100 克的超微型卫星，通常用于技术验证或教育任务</p> </blockquote> <p>尽管市面上已有多种 GPS 接收机，但它们大多针对地面应用进行优化，既未考虑星载场景下的能效需求，也可能在空间环境中根本无法正常工作。</p> <p>针对星载接收机，一种常见的节能技术是占空比控制。该方法在接收机获取位置解算（即能够以合理精度计算出位置）后将其关闭一段设定时间，以节省能量。然而，这种技术仅在接收机的首次定位时间（Time To First Fix, TTFF）相对较短时才有效——TTFF 指的是接收机从开机到成功锁定至少四颗 GPS 卫星、获取信号与导航数据并完成位置解算所需的时间。若每次唤醒后 TTFF 过长，则占空比控制可能无法显著降低能耗。</p> <blockquote> <p>💡 在小型卫星上，由于能源极其有限，GPS 接收机通常不会持续运行，而是采用占空比控制策略——即周期性地短暂开启以获取定位，随后关闭以节省电力。然而，每次开启后若首次定位时间（TTFF）过长（例如因高速运动导致的多普勒频移大、卫星可见性变化快），反而会大幅增加能耗，使节能策略失效。</p> </blockquote> <p>在地面系统中，可通过蜂窝基站辅助（如 A-GPS）快速获得定位，但在空间环境中实现短 TTFF 则更具挑战性。TTFF 阶段的大部分能量消耗用于搜索 GPS 卫星并捕获信号。若接收机事先未知本地时间及 GPS 星座信息，则必须在首次定位过程中搜索可见卫星、估计各卫星信号的多普勒频移，并对每颗 GPS 卫星独有的伪随机噪声（PRN）码进行相关运算。</p> <p>捕获过程的大部分时间消耗在存在多普勒频移的情况下搜索 PRN 码，以及读取导航数据。由于安装在卫星上的 GPS 接收机具有高轨道速度（约 7.8 km/s，500 km 高度），而 GPS 卫星自身速度也达约 3.9 km/s，因此信号中会出现显著的多普勒频移。地面通用 GPS 接收机通常设计用于处理约 $\pm$10 kHz 的多普勒频移，而低轨卫星上的接收机可能面临高达 $\pm$80 kHz 的频移。这极大地增加了 TTFF，因为接收机必须在视场范围内盲目搜索可见卫星。此外，若缺乏先验的 GPS 星座与时间信息，接收机在相关运算中需对所有卫星在整个多普勒范围内进行搜索，即使某些卫星当前并不可见。因此，空间接收机的 TTFF 可长达 25 分钟，在此类情况下，即使采用占空比控制也难以实现有效节能。</p> <p>一旦接收机锁定某颗 GPS 卫星，便可下载星历（ephemeris，提供 GPS 卫星的精确位置）和历书（almanac，提供粗略的 GPS 卫星位置信息），分别耗时 30 秒和 12.5 分钟。然而，大多数小型卫星（如纳卫星、立方星和飞卫星）通常未配备姿态控制系统——这类系统在大型卫星中较为常见——导致卫星（连同 GPS 接收机与天线）在三个轴上发生翻滚。无论卫星是否具备姿态控制能力，降低能耗都至关重要；而在天线方向混乱（旋转）的情况下，快速锁定 GPS 卫星并下载星历与历书显得尤为关键。</p> <blockquote class="block-tip"> <p>💡 许多小型卫星由于体积、重量和功耗限制，并未配备姿态控制系统，此时卫星会在轨道上不受控地绕多个轴旋转，这种状态称为“翻滚”（tumbling）。翻滚导致 GPS 天线方向持续变化，可能频繁偏离 GPS 卫星方向，使信号时断时续，难以完整接收定位所需的导航数据（如星历），从而延长甚至阻碍首次定位（TTFF），严重影响定位成功率和能效。</p> </blockquote> <p>这形成了一种“两难困境”：接收机需要近似的位置与时间信息才能更快完成定位，但这些信息本身又依赖于成功的位置解算才能获得。</p> <p>此外，节能不应以牺牲定位精度为代价。例如，搭载相机等载荷的任务可能对位置精度有较高要求。</p> <p>由于高轨道速度，采用占空比控制的 GPS 接收机每次唤醒时通常都需要锁定一组新的 GPS 卫星。因此，TTFF 成为影响星载 GPS 接收机能效表现的关键因素。鉴于此，本文聚焦于一个具体问题：通过降低 TTFF 来最小化能量消耗。</p> <p>为实现这一目标，作者提出了一种算法，利用发射时已知的轨道信息加速首次定位。同时，为验证该算法，作者还设计并开发了一款面向卫星应用的低功耗 GPS 接收机（基于商用 GPS 芯片）。具体而言，作者设计了一款符合空间应用要求的低功耗 GPS 接收机子系统，称为 $\mu\text{GPS}$，具备高能效特性。本工作的创新之处主要在于 $\mu\text{GPS}$ 这一低成本、低功耗微型 GPS 接收机的设计。</p> <p>鉴于 TTFF 是影响占空比控制型星载接收机能耗的主要因素，作者重点提出了一种能效感知算法，显著改善 TTFF。该算法名为“快速定位与前向/传播”（Fast Fix and Forward/Propagate, $F^3$），旨在最小化首次定位所需的时间与能量。通过预先估计可见卫星及其对应的多普勒频率，该算法大幅缩减了 PRN 码搜索的频率空间，从而显著缩短 TTFF。一旦确定多普勒频率并接收到信号，该接收机最多仅需 33 秒即可达到约 8 米的位置精度（95% 时间内）。</p> <blockquote class="block-tip"> <p>💡 在 Hummingbird 系统中，多普勒频率是通过发射前预加载的卫星两行轨道根数（TLE）来高精度估算的。利用这些数据，接收机可在开机前预测自身与各可见 GPS 卫星的相对位置和速度，从而计算出每颗卫星信号的多普勒频移，并将搜索范围缩小至接收机频率分辨能力（±250 Hz）之内，确保快速捕获信号。</p> </blockquote> <p>通过搭载 $\mu\text{GPS}$ 的已发射遥感纳卫星“NANOSAT”的在轨评估，作者证明：在 99% 的时间内，所提算法可在几乎不牺牲定位精度的前提下，实现高达 96.16% 的能耗节省。</p> <p>为估计多普勒频移，GPS 接收机在发射前会预加载最新的 GPS 历书和接收机所属卫星的两行轨道根数（TLE）。这使得 $F^3$ 算法能够在 GPS 射频前端关闭时，仅保留微控制器运行，利用 TLE 数据持续推算先前位置与 GPS 时间。由此可高效实现占空比控制：GPS 射频前端仅需在每个轨道周期内开启数次，用于校准位置与钟漂。目前，$\mu\text{GPS}$ 已成功集成于两颗纳卫星并完成发射，在轨运行状态良好。</p> <p>本文的主要贡献包括以下几点：</p> <ul> <li>设计了一款面向空间应用的低功耗微型 GPS 接收机子系统 $\mu\text{GPS}$，并展示了其在轨结果；</li> <li>提出了一套完整的解决方案，可显著降低星载 GPS 接收机的能量消耗；</li> <li>采用商用现成（COTS）GPS 芯片（支持原始数据输出）以控制成本，而非自行设计专用 GPS 模块，从而提升方案的普适性；</li> <li>利用搭载 $\mu\text{GPS}$ 的已发射纳卫星的在轨数据，验证了所提 $F^3$ 算法即使在卫星高速翻滚、GPS 天线方向混乱的情况下仍能有效工作；</li> <li>$\mu\text{GPS}$ 与 $F^3$ 组合下的 TTFF 仅比从单颗 GPS 卫星下载星历所需时间多出数秒，因而定位速度极快。</li> </ul> <p>本文其余部分结构如下：第 2 节介绍卫星轨道动力学与 GPS 基础知识；第 3 节阐述面向星载应用设计低成本、低功耗 GPS 接收机所面临的挑战与动机；第 4 节介绍 $\mu\text{GPS}$ 的设计；第 5 节详述所提 $F^3$ 算法；第 6 节评估 $\mu\text{GPS}$ 的性能；第 7 节综述相关领域的最新研究；第 8 节总结全文。</p> <h3 id="1-3-算法简介">1-3 算法简介</h3> <p><strong>算法目标</strong></p> <p>$F^3$ 算法的核心目标是显著缩短小型卫星上 GPS 接收机的首次定位时间（TTFF），从而在采用占空比控制（duty-cycling）策略时大幅降低能耗。由于小型卫星能源极其有限，而 TTFF 是冷启动阶段能耗的主要来源，因此优化 TTFF 成为提升能效的关键。</p> <p><strong>基本思路</strong></p> <p>$F^3$ 利用卫星发射前预加载的两类信息：GPS 历书（almanac）和本星的两行轨道根数（TLE）。当 GPS 射频前端关闭时，仅由低功耗微控制器根据 TLE 持续推算卫星当前位置和时间；当接收机下次唤醒时，已能预先估计当前可见的 GPS 卫星及其对应的多普勒频移。</p> <blockquote class="block-tip"> <p>💡 LE（Two-Line Element，两行轨道根数）是一种简洁、公开、标准化的卫星轨道描述格式，可用于预测卫星位置，在星载系统中常用于轨道推算和节能定位。</p> </blockquote> <p><strong>搜索空间压缩</strong></p> <p>传统冷启动需在全频段（±80 kHz）和所有 PRN 码中盲目搜索，形成二维搜索空间。$F^3$ 通过预估多普勒频率，将搜索范围压缩至已知频率附近的窄带（约 ±250 Hz），使搜索从二维降为一维（仅需扫描码相位）。这极大减少了信号捕获所需时间。</p> <p><strong>定位与校准</strong></p> <p>一旦接收机在预估频率附近捕获到至少四颗 GPS 卫星的信号，即可在最多 33 秒内完成星历下载并解算出位置（精度约 8–10 米，95%–99% 时间内）。随后，利用真实 GPS 解算结果反向更新 TLE 和历书，修正轨道推算误差，为下一次占空周期提供更准确的预测。</p> <p><strong>能效与鲁棒性</strong></p> <p>$F^3$ 使接收机仅需在每个轨道周期内开启数次（如每 50 分钟一次），每次工作不超过 33 秒。实测表明，该方法可实现 96.16% 的能耗节省，同时在卫星高速翻滚（天线方向混乱）的恶劣条件下仍能稳定获取定位，解决了传统方法在无姿态控制小型卫星上难以定位的难题。</p> <h3 id="1-4-总结">1-4 总结</h3> <p>Hummingbird 无需额外硬件（如多天线）或地面站支持，完全依赖星上计算，兼顾了低成本、低功耗、高鲁棒性与实用精度，特别适合资源受限的小型卫星任务。</p> <hr/> <h2 id="towards-dual-band-reconfigurable-metasurfaces-for-satellite-networking">Towards Dual-band Reconfigurable Metasurfaces for Satellite Networking</h2> <p><strong>面向卫星组网的双频可重构超表面研究<d-cite key="10.1145/3563766.3564086"></d-cite> (HotNets 2022)</strong></p> <h3 id="2-1-摘要">2-1 摘要</h3> <p>首批用于互联网服务的低地球轨道（LEO）卫星网络近期已部署并持续扩展，但在许多实际应用场景中仍将面临部署挑战。本文探索了一种双频段、电子可调的智能超表面，该表面能够实现卫星与移动用户之间的动态波束对准，使城市峡谷区域的服务成为可能，并提升农村地区的通信性能。作者的设计是首个针对 $K_u$ 频段内双信道的方案，采用了一种新颖的双惠更斯谐振器结构，利用无线电互易性，使该超表面能够同时在卫星上行链路和下行链路方向进行能量波束控制，并支持反射与透射两种工作模式。作者设计的超表面“Wall-E”在电磁仿真器中进行了评估，结果表明：在超过 150 度的视场角范围内进行波束偏转时，透射效率高达 94%，反射效率达 85%，功率损耗最多仅为 6 dB。基于一块 75 cm$^2$ 的表面，链路预算计算预测：与自由空间路径和穿砖墙路径相比，进入农村住宅窗户的链路信噪比（SNR）分别提升了 4 dB 和 24 dB。</p> <h3 id="2-2-引言">2-2 引言</h3> <p>近年来，低地球轨道（LEO）卫星数据网络引起了广泛关注，多家公司的卫星网络正处于不同阶段的部署过程中。这些网络由数百颗卫星组成的星座构成，在延迟和覆盖范围方面具有优势。例如，SpaceX 的 Starlink 系统已部署了包含 4,425 颗卫星的星座。当前系统通常采用用户安装在建筑物外部的碟形天线，该天线在上行链路和下行链路方向均与卫星通信。碟形天线再通过线缆连接至室内调制解调器，后者通常通过 Wi-Fi 与用户设备进行无线通信。</p> <blockquote class="block-tip"> <p>🧠 “直连蜂窝卫星网络”旨在让普通手机通过现有蜂窝射频（如 L/S 波段）直接与卫星通信，主要用于语音、短信或低速数据，强调终端兼容性与广域覆盖；而本文研究的是面向 $K_u$ 波段高速互联网接入的双频可重构智能超表面，需专用硬件支持，聚焦于高增益、双向宽带链路的动态波束控制。两者目标频段、通信速率和终端形态均不同，但都试图通过新型无线架构扩展卫星网络的覆盖与服务能力。</p> </blockquote> <p>尽管此类网络已经部署并开始有限使用，但作者认为，智能可重构表面将能够拓展其适用场景，并至少在以下三种情形中提升性能：</p> <ul> <li>交通载具应用：为实现最佳性能，交通运输系统（特别是高速铁路和飞机）需要自适应系统，以跟踪当前服务该载具的卫星，并在不同卫星之间进行切换。安装在车辆窗户或天窗上的电子可重构表面，可实现对车内用户的动态波束对准。</li> <li>城市峡谷区域服务：城市中的高楼大厦会遮挡卫星视线，导致街道层面或附近区域无法获得卫星网络覆盖。尽管 5G/NextG 无线网络在城市中覆盖较好，但高频金融交易等特定应用仍可从卫星网络中获益，因此城市部署仍具现实意义。在摩天大楼中部外侧安装电子可重构表面，可通过反射将信号送达街道层面，同时允许卫星信号穿透该表面进入建筑内部。</li> <li>农村地区服务：当前的 LEO 卫星系统需要室外安装碟形天线，并通过网关在卫星链路与用户终端之间转发流量。而安装在窗户或天窗上的电子可重构表面可以直接将卫星链路折射进用户家中，从而无需室外天线。</li> </ul> <blockquote class="block-tip"> <p>智能超表面（Reconfigurable Intelligent Surface, RIS），又称可重构智能表面，是一种由大量微小电磁单元（称为“超原子”）构成的平面结构。这些单元能够对入射的电磁波进行实时调控，例如改变其相位、幅度或传播方向，从而主动塑造无线信号的传播环境。</p> <p>与传统天线或中继器不同，智能超表面通常不主动发射信号，而是通过反射或透射方式重新引导已有信号，功耗极低（常使用变容二极管等元件，仅需微瓦级功率）。它支持动态编程，可根据通信需求实时调整波束指向，适用于非视距（NLOS）或信号遮挡场景。</p> <p>在卫星通信中，智能超表面可实现双频段（如 $K_u$ 波段上下行链路）同时工作，并利用角度互易性快速完成波束对准，特别适合高速移动场景（如飞机、高铁）。此外，它还能支持软切换、链路聚合等功能，提升低轨卫星网络的覆盖、稳定性和能效。</p> <p>简言之，智能超表面是一种“用软件控制电磁波”的新型无线基础设施，有望成为未来6G和天地一体化网络的关键使能技术。</p> </blockquote> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-20-leo-hardware/transportation-480.webp 480w,/assets/img/blogs/2025-10-20-leo-hardware/transportation-800.webp 800w,/assets/img/blogs/2025-10-20-leo-hardware/transportation-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-20-leo-hardware/transportation.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-20-leo-hardware/urban-canyon-480.webp 480w,/assets/img/blogs/2025-10-20-leo-hardware/urban-canyon-800.webp 800w,/assets/img/blogs/2025-10-20-leo-hardware/urban-canyon-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-20-leo-hardware/urban-canyon.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-20-leo-hardware/rural-480.webp 480w,/assets/img/blogs/2025-10-20-leo-hardware/rural-800.webp 800w,/assets/img/blogs/2025-10-20-leo-hardware/rural-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-20-leo-hardware/rural.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 卫星智能超表面的各种应用场景 </div> <p>$K_u$ 频段（10.7–18 GHz）是此类 LEO 卫星网络的自然选择：其波长（25–17 毫米）比更高频段更长，可在一定程度上减轻降水带来的影响；同时波长又足够短，能够形成窄波束，实现高指向性的地空通信。然而，由于其波长较短，在穿透厚重墙体时会产生显著损耗，因此要求发射端与接收端之间具备视距（LoS）或近似视距（例如仅穿过低损耗材料如玻璃）的传播路径。</p> <p>一种可能的解决方案是：不再依赖通过网关中继的碟形天线，而是利用附近的智能表面将卫星信号折射或反射至用户。这种方式可通过路径分集避免瞬时遮挡造成的“中断”，即通过表面重新路由信号以绕开障碍物。</p> <p>然而，实现智能表面设计的一个关键障碍在于，LEO 卫星网络采用频分双工（FDD）通信机制，上行链路（使用 $K_u$ 频段高端）和下行链路（使用 $K_u$ 频段低端）使用不同的子频段，这给表面设计带来了复杂性。</p> <p>本文探索了在 LEO 卫星网络中引入可重构智能表面（RIS）的设计创新。在此过程中，作者描述了其原型表面设计 Wall-E——一种基于超材料的双频可重构智能表面。</p> <blockquote class="block-tip"> <p>✅ RIS 与 smart metasurface 指的是同一类技术：</p> <ul> <li>一种可编程、可重构、基于超材料的电磁调控表面。<br/></li> <li>术语选择取决于作者背景（电磁学 vs. 通信网络），而非技术本质差异。</li> </ul> </blockquote> <p>首先，作者探讨了 $K_u$ 频段 RIS 的基础设计。为了将 RIS 应用于上述场景，该表面需同时支持透射（穿过表面）和反射（从表面反射）两种工作模式。惠更斯超表面（HMS）在实践中已被证明能够有效实现此类透射与反射功能，从而实现对辐射能量的全 360 度控制。尽管惠更斯单元的基本原理已为人所知，但如何在同时满足以下条件的情况下实现高效设计——即电子元件（变容二极管和电感）使用精简、支持两个或多个频率谐振（双频谐振）、并保持高效率——仍是尚未解决的问题。</p> <blockquote class="block-tip"> <p>💡 惠更斯超表面（Huygens’ Metasurface, HMS）是一种特殊类型的电磁超表面，HMS 通过协同调控电与磁响应，突破了传统超表面只能高效反射或透射的限制，是实现高效率、可重构、双模（透/反）智能表面的核心技术路径。</p> <p>💡 本文提出的 Wall-E 支持宽角度（150°）的高效反射与透射，但不是任意角度（如接近 90° 掠射或全向 360°）都有效。其“全 360° 相位控制”指的是相位调控能力（用于合成任意方向的波束），而非物理辐射方向无限制。实际波束偏转仍受阵列物理特性和效率约束。</p> </blockquote> <p>在 LEO 卫星网络中，由于卫星和用户均处于运动状态，用户、表面与卫星三者之间的物理无线波束对准过程极为复杂。作者将设计空间限定于双频惠更斯型 RIS，并进一步探讨如何在保持角度互易性的前提下，同时控制上行和下行波束。这种互易性可利用下行链路传输快速完成上行链路的波束对准，反之亦然。这一点在通信端点高速移动的场景（如卫星与飞机或列车通信）中尤为重要。LEO 卫星网络所采用的频分双工机制，使得上下行方向均可实现实时、连续的反馈，从而持续跟踪端点相对于 RIS 的位置，并不断更新 RIS 的波束偏转角度。</p> <blockquote class="block-tip"> <p>💡 RIS本身不具备感知或决策能力，其透射/反射模式与角度由外部控制器基于通信需求、几何关系和信道状态预先计算并配置。</p> </blockquote> <p>最后，作者还探讨了 RIS 在端到端 LEO 网络设计中的初始方向。考虑到 LEO 卫星星座整体绕地球移动，需在不同卫星之间进行切换以持续服务用户。RIS 能够将上行射频能量同时分配给两颗卫星，并将来自两颗卫星的下行波束合并，从而实现“软切换”，本文对此进行了进一步探讨。</p> <blockquote class="block-tip"> <p>💡 使用 RIS 必须保留原有的调制解调器。RIS 仅替代传统碟形天线的射频收发功能，而调制解调任务仍由专用设备完成。</p> </blockquote> <h3 id="2-3-总结">2-3 总结</h3> <p>本文提出了一种面向低轨卫星互联网的双频可重构智能超表面（Wall-E），首次在 $K_u$ 波段同时支持上行与下行链路，并兼具高效透射与反射能力。该设计基于新型双惠更斯谐振器结构，利用射频互易性实现上下行波束的同步偏转，在150度视场角内达到最高94%的透射效率和85%的反射效率。Wall-E 无需室外碟形天线，可直接安装于窗户或交通工具表面，显著提升城市峡谷和农村等复杂场景下的卫星链路质量，为未来高移动性、高效率的卫星通信提供了新路径。</p> <hr/> <h2 id="pmsat-optimizing-passive-metasurface-for-low-earth-orbit-satellite-communication">PMSat: Optimizing Passive Metasurface for Low Earth Orbit Satellite Communication</h2> <p><strong>PMSat：面向低轨卫星通信的无源超表面优化<d-cite key="10.1145/3570361.3613257"></d-cite> (MobiCom 2023)</strong></p> <h3 id="3-1-摘要">3-1 摘要</h3> <p>低地球轨道（LEO）卫星通信对于无线通信至关重要。尽管LEO卫星的制造与发射已变得高效且成本低廉，但地面站由于需要应对严重的路径损耗并实现精确波束跟踪，其设计复杂，成本仍然较高。因此，开发低成本、高性能的地面站对于LEO卫星通信的广泛应用具有重要意义。为此，作者设计了一种名为PMSat的无源超表面增强型LEO地面站系统，将超表面的细粒度波束成形能力与小型相控阵的自适应波束转向与聚焦能力相结合。在上行链路中，作者联合优化了相控阵码本与上行超表面相位分布，并通过切换码字实现电子波束转向；在下行链路中，进一步联合优化了超表面相位分布，以提升在宽入射角范围内的聚焦性能并增强接收信号强度（RSS）。PMSat原型包含一块无源超表面（上行21×21单元，下行22×22单元）以及1×4接收与1×4发射相控阵天线。大量实验验证了所提方案的有效性，结果表明，经优化后的超表面在上行和下行链路中分别提升了8.32 dB和16.57 dB的信噪比（SNR）。</p> <h3 id="3-2-引言">3-2 引言</h3> <p>低地球轨道（LEO）卫星通信有望弥合数字鸿沟并提升全球连通性。近年来，卫星技术的进步显著降低了LEO卫星的制造与发射成本。然而，地面站的高昂成本限制了LEO卫星通信的广泛部署。</p> <p>LEO网络通常采用毫米波（mmWave）频段以实现高吞吐量，因此地面站必须应对严重的毫米波信号路径损耗。为了持续跟踪高速移动的LEO卫星，地面站还需具备精确且快速的波束跟踪与转向能力，这显著增加了其收发设备的复杂性和成本。</p> <blockquote class="block-tip"> <p>💡 毫米波（mmWave）一般指 30 GHz 到 300 GHz 的频段，本文中 PMSat 系统使用的频段是上行 30 GHz，下行 20 GHz，并未使用上篇文章中所提到的 $K_u$ 频段（频率范围 12–18 GHz）。</p> </blockquote> <p>目前，卫星通信网络中常用的抛物面天线通过物理波前补偿来增强接收信号强度（RSS），但依赖笨重的机械装置进行方向调整。另一种方案是采用大规模相控阵天线，它无需物理移动即可实现信号聚焦与电子波束转向，从而获得紧凑的外形。然而，要实现高分辨率的波束转向，需要大量天线单元和移相器，尤其在毫米波频段下成本高昂。</p> <p>超表面（metasurface）技术能够灵活、精确地调控电磁（EM）波前，为提升无线通信网络性能提供了独特机遇。已有研究在多个频段（如Wi-Fi、毫米波和蜂窝通信）开发了超表面，用于实现波束分裂并提升RSS。可编程超表面能适应动态和未知的无线信道，已被广泛研究，但其依赖可编程元件（如变容二极管、PIN二极管、额外的微控制器和电源），导致成本显著增加。而在LEO网络中，卫星沿预定轨道运行，简化了超表面的设计。因此，作者的目标是开发一种低成本、紧凑且无需外部供电的地面站，利用无源超表面实现高性能通信。</p> <p>尽管超表面研究已取得诸多进展，但在LEO应用中实现实用的无源超表面仍面临若干重大挑战：</p> <p>第一，LEO卫星通信系统通常使用不同的频段分别用于上行链路和下行链路，以确保地面站与卫星之间高效且无干扰的通信。使用单一超表面同时支持上下行可降低成本并节省空间，但难以避免上下行之间的相互干扰。</p> <p>第二，在上行通信过程中，由于发射天线和无源超表面均保持静止，而LEO卫星持续移动，因此超表面发出的信号必须始终对准当前卫星位置。然而，无源超表面在制造完成后无法重新配置，因此设计一种静止且无源却能动态将电磁信号从发射天线导向移动LEO卫星的超表面极具挑战性。</p> <p>第三，在下行通信中，持续移动的LEO卫星导致入射角不断变化，超表面需能将来自所有可能入射角的信号重新导向接收天线，以增强RSS。</p> <p>为应对上述挑战，本文提出了一种名为PMSat的无源超表面增强型LEO地面站系统。作者联合优化无源超表面与小型相控阵，构建了一种低成本、高性能的收发天线系统。首先，作者设计了一种适用于LEO场景的透射式超表面单元（亦称“超原子”）。每个超原子可在几乎无功率损耗的情况下对入射信号引入相移。所设计的超原子需满足高透射率（例如高于90%）、360°相位调制范围，并支持LEO场景中的双频段和宽入射角。</p> <p>为在单一超表面上同时支持双频段，作者采用“金属-基板-金属”三明治结构作为上下行的超原子单元，并将下行图案置于中心、上行图案置于四角。通过超参数调优算法，确定基本结构的最佳几何参数，以同时实现高透射率、360°相移覆盖、宽入射角支持，并最小化上下行间的干扰。</p> <p>此外，为赋予无源超表面动态聚焦与波束转向能力，作者提出将无源超表面与小型相控阵（例如1×4天线）独特集成。该组合既能利用超表面强大的波前调控能力实现细粒度波束成形，又能通过切换码字利用软件控制的相控阵实现动态波束转向。具体而言，在上行链路中，优化后的超表面利用相控阵的不同码字将电磁波导向目标卫星；在下行链路中，超表面则将来自目标卫星的电磁波聚焦到接收相控阵天线上。</p> <p>一个关键设计问题是：如何联合优化上下行中超表面的相位分布图与相控阵的码字。为此，作者建立了相控阵与超表面的信道模型，包括每个天线与每个超表面单元之间的近场信道响应，并将相控阵码本（即各天线馈源权重）与超表面相位补偿图（即各单元相移）的联合设计表述为优化问题。作者采用基于梯度下降的算法求解最优配置：上行优化为每个目标出射角提供对应的相控阵码字及固定的超表面相位图；下行优化则得到一个能在宽入射角范围内将信号聚焦至接收天线的超表面相位图。</p> <p>值得注意的是，该系统具备足够的灵活性，可同时支持对多颗卫星的电子波束转向与信号聚焦，从而避免硬切换（即断开与前一颗卫星连接后再连接新卫星）过程中的服务中断。</p> <p>为验证所提出的PMSat系统，作者采用PCB工艺制作了优化后的无源超表面，包含21×21个上行单元和22×22个下行单元，并实现了一块收发天线原型板，包含两个1×4天线阵列（上行30 GHz，下行20 GHz）。整个系统总重132克，包括超表面（80.25克）、收发天线板（19.81克）及用于固定两者的3D打印支架（32.36克）。作者通过理论分析、高保真电磁仿真（HFSS）及真实环境测试平台进行了全面评估。在微波暗室和户外环境中的实验结果均验证了HFSS仿真的准确性，并证明了所提系统的可行性与有效性：与单独使用1×4相控阵相比，优化后的超表面在下行链路中平均增益提升16.57 dB，上行链路提升8.32 dB。</p> <h3 id="3-3-总结">3-3 总结</h3> <p>该论文提出了 PMSat——一种面向低轨（LEO）卫星通信的低成本地面站系统，通过联合优化无源超表面与小型相控阵天线（如1×4阵列），在上行链路实现电子波束转向，在下行链路实现宽入射角范围内的高效信号聚焦。其核心创新在于：设计了一种支持双频段（上行30 GHz、下行20 GHz）、高透射率（&gt;90%）、360°相移覆盖的无源超表面单元，并通过算法联合优化超表面相位分布与相控阵码本。实测表明，相比单独使用小型相控阵，PMSat在上行和下行链路分别提升信噪比8.32 dB和16.57 dB，显著降低了地面站成本与复杂度。</p> <hr/> <h2 id="from-foe-to-friend-the-surprising-turn-of-megaconstellations-in-radio-astronomy">From Foe to Friend: The Surprising Turn of MegaConstellations in Radio Astronomy</h2> <p><strong>化敌为友：巨型星座在射电天文学中的意外转机<d-cite key="10.1145/3696348.3696863"></d-cite> (HotNets 2024)</strong></p> <h3 id="4-1-摘要">4-1 摘要</h3> <p>廉价的航天发射催生了近地轨道（LEO）卫星的爆炸性增长时代。这一趋势不仅带来了覆盖全球的高速数据服务——即近地轨道卫星巨型星座，也推动了由各类组织发射的纳卫星（例如立方星）的广泛部署。不幸的副作用是，这些卫星对射电天文等高灵敏度接收设备造成了有害干扰——地球上已无一处可完全免受干扰。如何在享受卫星革命成果的同时，不致于“失明”而无法窥探宇宙的奥秘？</p> <p>网络化是关键所在。本文提出了一种名为 InOrbitNet 的方案，利用高能力的近地轨道巨型星座，对低能力纳卫星的通信流量进行聚合与回传。通过模拟近地轨道卫星与纳卫星的轨道动态，作者表明，与当前非网络化的直连地面通信方式相比，该方案可实现数量级级别的延迟降低和显著的容量提升。更重要的是，由于巨型星座具备高度能力且集中管理，这种射频信号的整合也有助于保护射电天文免受干扰。</p> <h3 id="4-2-引言">4-2 引言</h3> <p>近年来，近地轨道（LEO）卫星的数量急剧增长。这些卫星用途广泛，涵盖对地观测、通信服务、科学研究、技术验证以及教育等领域。这一趋势的主要驱动力在于发射成本的大幅下降，例如 SpaceX 的拼车发射服务。如今，将1公斤载荷送入近地轨道的成本已降至约2720美元，相较十年前下降了95%。</p> <p>近地轨道卫星通常采用多种无线技术，通过下行链路将采集的数据传回地球，并通过上行链路接收指令与更新。然而，这些连接多为点对点链路，而非具备共享基础设施的网络。这种连接方式存在两大主要问题：</p> <ul> <li>卫星连通性挑战：大多数资源有限的小型卫星使用免许可的UHF频段，仅能实现极低带宽（约kbps量级）。它们也可选择使用更高频段以获得几 Mbps 的带宽，但这通常涉及额外的许可流程与费用。此外，单个地面站与卫星的通信窗口极为有限（每天最多约一小时），进一步压缩了本已不足的带宽，使得许多应用场景难以实现。通过在全球多地增设地面站虽可提升覆盖，但成本高昂且不可扩展，违背了低成本卫星的初衷。</li> <li>对射电天文的干扰：这些星地链路会在邻近射电望远镜使用的频段产生非预期的辐射能量，从而劣化观测数据。射电天文在人类理解宇宙的过程中扮演着关键角色，近期对黑洞吸积盘的突破性成像即为例证。然而，近地轨道卫星数量的激增正对射电天文的未来构成严重威胁。射电天文观测受限于物理规律，几乎无法调整其观测频率。所观测的天体现象通常发出极其微弱的信号——强度约为0.001央斯基（Jy），即−230 dBm/m²/Hz，比任何有意义的宽带通信信号至少低120 dB。因此，即使微小的带外辐射进入射电天文频段，也可能导致观测数据完全失效。</li> </ul> <p>以 Starlink 为代表的卫星互联网巨型星座，有望彻底改变近地轨道卫星的连通方式。作者认为，随着空间互联网基础设施的建立，网络研究界正应重新思考近地轨道卫星的无线连接范式，尤其对资源受限但可借助邻近巨型星座的纳卫星而言尤为有利。</p> <p>本文提出一种新构想：近地轨道卫星应逐步放弃直连地球的无线链路，转而利用 Starlink 等巨型星座作为网络回传通道接入互联网。该方案被命名为 InOrbitNet，可同时应对上述两大挑战：首先，由于近地轨道卫星通常比地面站更接近巨型星座中的某颗卫星，因此有望提供更高带宽和更低延迟的连接；其次，该方案能显著减少对射电天文的射频干扰。</p> <p>值得注意的是，尽管巨型星座本身也可能对天文观测造成射电干扰，但该构想具备两项关键优势：</p> <ul> <li>整体干扰更低：通过使用已分配给巨型星座的现有频段，近地轨道卫星可大幅缩减其频谱占用，有效消除对众多邻近射电天文频段的发射；</li> <li>协调更高效：InOrbitNet 使射电天文界只需与少数几家巨型星座运营商协调干扰缓解措施，避免了与全球成千上万家卫星运营商逐一沟通或依赖复杂的国际法规。事实上， Starlink 已开始与天文界合作，共同减轻其卫星对天文观测的影响。</li> </ul> <p>作者对各类纳卫星与现有 Starlink 卫星之间的无线链路进行了仿真。结果表明，现有 Starlink 卫星可对600公里以下轨道的纳卫星实现近乎连续的连接，中位链路速率达15.9 Mbps，相较单个地面站提升了15倍。随着企业部署更密集的星座，链路速率有望进一步显著提升。</p> <p>本文的主要贡献包括：</p> <ul> <li>提出一种名为 InOrbitNet 的近地轨道卫星连接范式转变，可显著降低对射电天文的射频干扰；</li> <li>InOrbitNet 为近地轨道卫星提供更稳健的连接，带宽更高、延迟更低，优于现有星地通信系统；</li> <li>通过大量仿真验证了 InOrbitNet 的可行性，展示了14倍的链路吞吐量提升和240倍的延迟降低。</li> </ul> <h3 id="4-3-总结">4-3 总结</h3> <p>该论文提出了一种名为 InOrbitNet 的新架构，主张让资源有限的近地轨道纳卫星不再直接与地面通信，而是通过高能力、集中管理的巨型星座（如 Starlink）进行在轨回传。这一方法不仅能显著提升纳卫星的通信带宽、降低延迟，还可大幅减少对射电天文观测的射频干扰——既通过频谱整合避免邻频泄漏，又简化了与少数巨型星座运营商的协调机制，从而在享受卫星互联网红利的同时保护射电天文学的未来。</p>]]></content><author><name></name></author><category term="科研"/><category term="低轨卫星网络"/><category term="硬件"/><category term="物理层"/><summary type="html"><![CDATA[本文整理了截至 2025 年，在低轨卫星网络硬件层面与物理层的代表性论文。]]></summary></entry><entry><title type="html">SIGCOMM’ 25 低轨卫星网络论文簇</title><link href="https://cresc3nt.github.io/blog/2025/sigcomm25/" rel="alternate" type="text/html" title="SIGCOMM’ 25 低轨卫星网络论文簇"/><published>2025-10-19T10:00:00+00:00</published><updated>2025-10-19T10:00:00+00:00</updated><id>https://cresc3nt.github.io/blog/2025/sigcomm25</id><content type="html" xml:base="https://cresc3nt.github.io/blog/2025/sigcomm25/"><![CDATA[<h2 id="direct-to-cell-satellite-network-without-satellite-navigation">Direct-to-Cell Satellite Network without Satellite Navigation</h2> <p><strong>无需卫星导航的直连蜂窝卫星网络<d-cite key="10.1145/3718958.3750522"></d-cite></strong></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-19-sigcomm25/direct-to-cell-480.webp 480w,/assets/img/blogs/2025-10-19-sigcomm25/direct-to-cell-800.webp 800w,/assets/img/blogs/2025-10-19-sigcomm25/direct-to-cell-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-19-sigcomm25/direct-to-cell.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Direct-to-Cell Satellite Network without Satellite Navigation </div> <h3 id="1-1-摘要">1-1 摘要</h3> <p>直连蜂窝卫星通过 4G、5G 及未来通信技术，为普通手机和物联网设备提供全球网络服务。为了确保网络服务的高度可用性、可信性以及符合漫游策略，这类系统严重依赖来自外部全球导航卫星系统（GNSS）的用户地理位置和时间信息，以辅助无线接入、身份认证与授权。作者的分析与实地测试表明，这种跨技术的过度依赖会将卫星导航系统的缺陷传导至直连蜂窝卫星网络，引发多种问题，例如连接中断、计费错误（多收或少收）、未授权服务以及即使卫星信号可达时仍被拒绝服务。</p> <blockquote class="block-tip"> <p>💡 “直连蜂窝卫星网络”（Direct-to-Cell Satellite Network）是一种让普通手机或物联网（IoT）设备无需专用终端，直接通过低轨（LEO）通信卫星接入蜂窝网络（如 4G、5G） 的技术架构。</p> </blockquote> <p>为此，作者提出 SN2（Self-Navigating direct-to-cell Satellite Network）方案，采用“命运共享”（fate-sharing）原则，利用直连蜂窝卫星自身实现自导航网络。SN2 通过灵活权衡卫星网络可用性与导航精度，以几乎不增加硬件或通信资源开销的方式，提供“足够好”的内置导航能力，从而保障高可用且功能正确的网络服务。</p> <p>作者在商用卫星手机和符合 3GPP NTN 协议栈的平台上对 SN2 进行了评估。结果表明，与现有方案相比，SN2 可将网络可用性提升 4.4–23.5 倍，并将接入延迟降低 1.9–12.3 倍。</p> <h3 id="1-2-引言">1-2 引言</h3> <p>直连蜂窝卫星（Direct-to-cell satellites）使我们的普通手机和物联网设备（IoTs）能够通过 4G、5G 及未来通信技术，在全球任何地点、任何时间接入网络服务。得益于制造和发射大量卫星进入太空的成本不断下降，这些卫星正被快速部署到距地表 340–2000 公里的低地球轨道（LEO）上。这一高度更接近用户终端，从而带来更好的无线信号质量、更快的数据速率，以及更经济的终端硬件。</p> <blockquote class="block-tip"> <p>普通手机之所以能与 LEO 卫星通信，并非因为手机本身具备卫星通信能力，而是因为：<br/></p> <ul> <li>LEO 卫星足够近 <br/></li> <li>卫星端做了超强增强（大天线、高功率、波束成形） <br/></li> <li>3GPP NTN 标准对协议做了适应性调整 <br/></li> <li>应用场景被限制在低速率、高容错的服务（如 SOS、短信）</li> </ul> </blockquote> <p>截至目前，一些直连蜂窝卫星系统已投入运行，例如 Starlink、AST、Iridium、面向 iPhone 的 Globalstar，以及面向 Google Pixel 的 Skylo。Starlink 已发射数百颗直连蜂窝卫星，并已演示使用普通 4G 手机实现视频通话和高达 17 Mbps 的下行速率。同时，3GPP 针对直连蜂窝卫星的非地面网络（NTN）全球标准化工作也在快速推进中。</p> <blockquote class="block-tip"> <p>🛰️ Starlink 的直连蜂窝卫星运行在约 500–600 公里高度 <br/> 🛰️ Iridium 星座轨道高度约为 780 公里 <br/> 🛰️ Globalstar 的轨道高度约为 1400 公里； <br/> 🛰️ AST SpaceMobile 计划在约 700–900 公里轨道部署</p> </blockquote> <p>直连蜂窝卫星网络的一个显著特征是：由于 LEO 卫星在地球上空高速移动（约 7 km/s），用户会经历大范围、长时间的空间-时间动态变化。这对用户激活网络服务提出了多方面的全新挑战：严重的无线传播延迟和多普勒频移降低了卫星链路的可用性；卫星对用户的可见时间短暂，迫使用户频繁重新认证；此外，不同国家和运营商的漫游策略（如接入控制、服务质量 QoS 和计费规则）差异巨大，使得授权过程变得复杂。</p> <p>目前应对这些挑战的通用方案是：在无线接入、认证和授权等环节中，引入用户实时的地理位置和时间信息作为辅助。为获取这些信息，现有运行中的卫星系统和 3GPP 标准均强制要求用户终端在尝试接入卫星时依赖外部导航服务——主要是全球导航卫星系统（GNSS），如 GPS 或北斗。对于尚未联网的终端而言，GNSS 通常是唯一可行的定位与授时手段。</p> <blockquote class="block-tip"> <p>💡 3GPP（3rd Generation Partnership Project，第三代合作伙伴计划）是一个由全球多个电信标准组织共同组成的国际合作项目，负责制定和维护移动通信技术的全球标准，包括2G、3G、4G、5G以及未来的 6G 技术。3GPP 将卫星纳入移动通信网络架构，提出了 非地面网络（Non-Terrestrial Networks, NTN）的概念，并将其作为 5G 及未来 6G 的重要组成部分。</p> </blockquote> <p>然而，这种跨技术对外部导航卫星的依赖，却成为直连蜂窝卫星网络的“阿喀琉斯之踵”。众所周知，GNSS 信号微弱（源自 20,000–35,000 公里高的中地球轨道），且星座规模小（仅数十颗卫星），极易受到无线电干扰或恶意操控（如欺骗攻击）而导致服务中断或定位错误。</p> <blockquote class="block-tip"> <p>💡 3GPP（第三代合作伙伴计划）通过其 Release 17（2022年）首次正式引入非地面网络（NTN）支持，允许普通手机通过低轨（LEO）或地球静止轨道（GEO）卫星直接接入 4G/5G 网络，并在后续的 Release 18 和 19 中进一步增强了 NTN 功能，包括卫星广播系统信息（如 SIB19/SIB31，内含卫星星历）、上行定时提前（TA）与多普勒频移预补偿、基于 GNSS 的定位辅助接入，以及漫游策略与授权机制。直连蜂窝卫星系统（如 Starlink、AST、Globalstar 等）之所以能利用普通智能手机实现通信，正是基于对 3GPP NTN 标准的遵循——它们复用 LTE 或 5G NR 的物理层、MAC 层、RRC 和 NAS 协议栈，使终端无需专用硬件，仅通过软件升级即可支持卫星通信。然而，3GPP 也在标准（如 TS 38.300）中明确规定：终端在接入卫星前必须具备有效的 GNSS 位置和星历信息，否则禁止发送上行信号，这一强制要求正是论文所指出的“对 GNSS 过度依赖”的技术根源。正因如此，包括苹果 iPhone 的卫星 SOS（基于 Globalstar）、Google Pixel 的卫星求救（基于 Skylo）以及 T-Mobile 与 Starlink 的合作等产业落地项目，都高度依赖 3GPP NTN 标准来实现全球互操作性与兼容性。</p> </blockquote> <p>作者在第 3 节中的分析与实地测试表明，这些 GNSS 缺陷会传导至直连蜂窝卫星网络，威胁其可用性与功能正确性，导致计费错误（多收或少收）、未授权服务，甚至在卫星信号可达的情况下仍被拒绝服务。而这种跨技术依赖超出了直连蜂窝卫星系统的控制范围。虽然可通过使用带宽更大、具备加密保护的军用 GNSS 来缓解，但这类高阶 GNSS 对普通手机和物联网设备而言既不可用也不经济。</p> <p>本文探讨在不依赖外部卫星导航的前提下实现直连蜂窝卫星网络的可行性。作者认为，摆脱对外部服务的不可控依赖，是提升直连蜂窝卫星网络鲁棒性的理想特性。然而，核心挑战在于：当外部导航提供的位置和时间信息不可靠或缺失时，如何仍能保证网络功能的正确性。</p> <p>为此，作者提出一种自导航的直连蜂窝 LEO 卫星网络新范式。该范式遵循“命运共享”（fate-sharing）的网络设计原则，旨在只要通信链路可用，网络服务就应始终在线，而不受外部导航服务可靠性的影响。其实现基于两个关键思想：</p> <ul> <li>将直连蜂窝卫星本身用作导航源：与 GNSS 类似，直连蜂窝卫星可通过其广播信号和可预测的星历实现导航功能。只要卫星在服务中，用户即可利用其进行高可用的内置定位与授时。相比中地球轨道上的小规模 GNSS 星座，LEO 超大规模星座距离用户更近、信号更强、可见卫星更多，因此可作为 GNSS 的可靠补充。</li> <li>面向网络的导航（Network-oriented navigation）：不同于专用导航卫星，直连蜂窝卫星因其通信本质，无法始终保证高精度定位或授时。幸运的是，作者发现高精度导航并非总是必需。直连蜂窝卫星网络的可用性与导航精度之间存在灵活、动态的权衡空间，允许在定位精度较低的情况下仍提供功能正确的网络服务。</li> </ul> <p>作者的解决方案 SN2（Self-Navigating direct-to-cell Satellite Network）融合上述理念，构建高可用、强韧的卫星网络。SN2 并不追求高精度导航，而是结合 GNSS 与内置的直连蜂窝导航，以“足够好”的位置和时间信息，尽快激活网络服务，且几乎不增加硬件或通信资源开销。为此，SN2 重新审视了卫星蜂窝网络在无线接入、认证和授权环节对导航的实际需求，并在不损害功能正确性的前提下安全地放宽这些需求。</p> <p>通过复用现有的蜂窝信号和控制消息，SN2 可在现有手机/IoT 设备、卫星及 3GPP NTN 架构上增量部署。需要强调的是，SN2 并非要取代 GNSS，而是一种混合方案，可在 GNSS 失效或不准时作为后备选项，确保卫星服务不中断。</p> <p>作者在商用卫星手机和 Amarisoft NTN 协议栈上对 SN2 进行了原型实现与评估。结果表明，相比标准 3GPP NTN 方案以及正在运行的 Iridium/Globalstar 直连蜂窝 LEO 卫星系统，SN2 可将网络可用性提升 4.4–23.5 倍，并将接入延迟降低 1.9–12.3 倍。</p> <p>伦理声明：本研究不涉及伦理问题。所有实验均使用自有设备进行，未对运行中的卫星、网络或用户造成任何影响。</p> <h3 id="1-3-简要概括">1-3 简要概括</h3> <p>SN2（Self-Navigating direct-to-cell Satellite Network）通过摆脱对 GNSS（全球导航卫星系统）的强依赖，在 GNSS 不可用、不准或被干扰/欺骗时仍能维持网络服务，从而显著提高网络可用性并降低接入延迟。其核心机制体现在以下三个方面，分别对应直连蜂窝卫星网络的三个关键环节：无线接入（Radio Access）、认证（Authentication）和授权（Authorization）。</p> <p><strong>无线接入</strong>：放宽定位精度要求，实现“足够好”的自导航</p> <ul> <li>问题：传统方案要求终端必须有高精度 GNSS 位置，才能计算上行定时提前（TA）和多普勒频移补偿，否则无法接入卫星。</li> <li>SN2 的改进： <ul> <li>发现无需精确地理坐标，只需相对距离和相对速度（用于 TA 和 Doppler 补偿）即可完成接入。</li> <li>定义了“可容忍定位误差区域”（如环形区域），只要终端位置落在该区域内，即使绝对位置不准，也能成功同步。</li> <li>采用“边定位边尝试接入”的试错策略：一旦某次定位结果足以支持接入，立即停止进一步定位，避免等待高精度 GNSS 定位（TTFF 可达数十秒）。</li> <li>在 GNSS 失效时，仅用一颗可见直连蜂窝卫星（通过其广播的 PSS/SSS 和星历）进行单星多普勒/时延三角定位，作为底线保障。</li> </ul> </li> </ul> <p>✅ 效果：即使无 GNSS，也能在数秒内完成首次接入，接入延迟降低 1.9–12.3 倍。</p> <blockquote class="block-tip"> <ul> <li>TA（Timing Advance）是蜂窝系统中用于上行同步的时间提前量。在直连蜂窝卫星中，由于距离远、延迟大，TA 的准确计算至关重要。传统方案依赖 GNSS 提供位置来预补偿 TA，而 SN2 通过放宽精度要求和利用卫星自导航，实现了无需 GNSS 的可靠 TA 估计，从而提升网络可用性并降低接入延迟。<br/></li> <li>多普勒频移补偿 是直连蜂窝卫星通信中确保上行/下行信号正确解调的关键步骤。由于 LEO 卫星高速运动，频移极大，必须提前预补偿。传统方法强依赖 GNSS，而 SN2 通过放宽精度要求 + 自导航机制，实现了无需 GNSS 也能有效补偿多普勒频移，从而提升网络可用性并降低接入延迟。</li> </ul> </blockquote> <p><strong>认证</strong>：基于“单调时间”的自定时机制，抵御重放攻击</p> <ul> <li>问题：现有方案依赖 GNSS 提供精确时间来验证卫星广播消息（如 SIB）的数字签名新鲜度；若 GNSS 时间被篡改，可能接受重放的伪造卫星信号。</li> <li>SN2 的改进： <ul> <li>利用“合法卫星不会广播未来时间戳”这一事实，提出单调自定时（Monotonic Self-Timing）： <ul> <li>终端扫描所有可见卫星的 SIB 签名时间戳；</li> <li>将本地时间设为最新合法时间戳；</li> <li>任何早于该时间的重放消息均被拒绝。</li> </ul> </li> <li>即使 GNSS 时间被欺骗，只要存在至少一颗合法卫星，终端就能恢复正确时间并识别伪造卫星。</li> </ul> </li> </ul> <p>✅ 效果：在 GNSS 被干扰或欺骗时仍能完成安全认证，避免服务拒绝，提升可用性。</p> <p><strong>授权</strong>：按需、非阻塞的漫游策略授权</p> <ul> <li>问题：传统方案采用“全有或全无”策略——必须提供高精度位置才能授权服务，否则直接拒绝，导致在 GNSS 不可用时完全无法使用。</li> <li>SN2 的改进： <ul> <li>观察到：90% 以上的卫星波束覆盖区域具有同质漫游策略（如同一国家内），无需精确位置即可授权</li> <li>提出动态授权模型： <ul> <li>若波束覆盖单一策略区域 → 立即授权，无需位置；</li> <li>若波束跨越多策略区域（如国界）→ 利用网络侧测距（基于上行 TA）校准用户位置，缩小定位范围；</li> <li>仅在极少数模糊情况下（&lt;3%）才要求终端进一步提高定位精度。</li> </ul> </li> <li>支持按服务分级授权：短信/语音只需波束级定位，紧急 SOS 才需高精度。</li> </ul> </li> </ul> <p>✅ 效果：绝大多数场景下无需等待 GNSS 定位即可获得服务，大幅减少授权延迟，尤其在 GNSS 失效时仍能提供基础服务。</p> <p><strong>综合效果</strong></p> <table class="table table-sm table-bordered"> <thead> <tr> <th class="text-center">场景</th> <th class="text-center">传统方案（依赖 GNSS）</th> <th class="text-center">SN2</th> </tr> </thead> <tbody> <tr> <td class="text-start">GNSS 正常</td> <td class="text-start">可用，但需等待高精度定位</td> <td class="text-start">更快接入（利用更多卫星+放宽精度）</td> </tr> <tr> <td class="text-start">GNSS 被干扰/欺骗</td> <td class="text-start">完全不可用</td> <td class="text-start">仍可接入（自导航+自定时）</td> </tr> <tr> <td class="text-start">卫星切换频繁（LEO 特性）</td> <td class="text-start">需反复获取 GNSS</td> <td class="text-start">复用首次定位结果，快速重连</td> </tr> </tbody> </table> <h3 id="1-4-总结">1-4 总结</h3> <p>SN2 的核心思想是：将直连蜂窝卫星本身作为导航源，通过“命运共享”（fate-sharing）原则，让通信链路的可用性不再受制于外部 GNSS。它不追求高精度导航，而是根据网络功能的实际需求，提供“刚好够用”（good enough）的位置和时间信息，从而在几乎不增加硬件或通信开销的前提下，实现高可用、低延迟、抗攻击的直连蜂窝卫星网络。</p> <hr/> <h2 id="starcdn-moving-content-delivery-networks-to-space">StarCDN: Moving Content Delivery Networks to Space</h2> <p><strong>StarCDN：将内容分发网络迁移至太空<d-cite key="10.1145/3718958.3754345"></d-cite></strong></p> <h3 id="2-1-摘要">2-1 摘要</h3> <p>低地球轨道（LEO）卫星网络（如 Starlink）提供全球互联网接入，目前已为数百万用户提供内容服务。近期研究表明，现有的网络基础设施（如内容分发网络，CDN）并不适合卫星网络架构。传统的地面 CDN 会降低卫星网络用户的性能体验，且无法缓解地面与卫星链路之间的拥塞问题。</p> <p>为此，作者设计了 StarCDN——一种新型 CDN 架构，将内容缓存在太空中，以提升用户体验并减少地–星链路的带宽消耗。设计 StarCDN 的核心挑战在于卫星的轨道运动：每颗卫星的覆盖区域快速变化，可能在几分钟内从服务美国转为服务欧洲等截然不同的地区。</p> <p>为应对这一挑战，作者提出了专为 LEO 卫星网络定制的一致性哈希和中继获取（relayed fetching）机制。该设计使缓存内容能够逆着卫星轨道运动方向流动，从而抵消卫星运动带来的影响。</p> <p>作者利用 Akamai 的真实世界流量轨迹对 StarCDN 与多个基线方案进行了评估。结果表明，StarCDN 可将地–星上行链路带宽利用率降低 80%，并将用户感知延迟改善 2.5 倍。此外，作者还开源了一个名为 SpaceGEN 的轨迹生成器，用于对基于卫星的 CDN 进行逼真的仿真。</p> <h3 id="2-2-引言">2-2 引言</h3> <p>由运行在低地球轨道（LEO）上的巨型星座所提供的卫星网络正迅速普及。领先的 LEO 卫星网络提供商 Starlink 目前已在 100 多个国家拥有超过四百万用户。它目前已部署超过 7000 颗卫星，并计划扩展至 4 万颗，同时提供直连手机的服务。同样，OneWeb 和亚马逊 Kuiper 等公司也已提供或计划提供类似的基于 LEO 卫星的网络服务。LEO 卫星网络（LSNs）越来越多地被用于向全球用户分发内容。作者的工作聚焦于利用 LSN 提升内容分发的性能并降低成本。</p> <p>内容分发网络（CDN）：CDN 在约四分之一个世纪前被发明，旨在提升通过地面互联网分发网站、媒体和下载等内容的性能并降低成本。CDN 在全球部署数十万个“边缘”服务器，将内容缓存在靠近用户的位置进行分发。这使得内容能够以更低的延迟交付给用户，因为内容只需经过从边缘服务器到用户的较短网络路径。此外，CDN 还降低了成本和网络资源消耗：内容只需从源服务器下载一次到 CDN 边缘服务器，便可多次分发给用户，从而节省了从源服务器到边缘节点的上游广域网带宽。为了实现这些性能和成本优势，CDN 在全球部署大量边缘服务器集群，每个集群为邻近的一组用户提供缓存和分发服务。此外，CDN 还采用一致性哈希等先进技术来管理集群内的内容。CDN 所带来的优势使其成为现代互联网基础设施中不可或缺的组成部分，目前承载了全球近 75% 的互联网流量。</p> <p>现有方案的不足：当前将传统（地面）CDN 技术与 LSN 结合使用的方案存在若干缺陷，这也正是作者研究的动机。近期研究表明，在 Starlink 中使用传统地面 CDN 会降低用户的体验质量。这种性能下降的原因在于，Starlink 中的用户流量采用“弯管”架构：用户连接到一颗卫星，该卫星再连接到最近的地面站，如下图所示。随后，地面站连接到地面 CDN 的边缘服务器，这会使延迟增加超过 100 毫秒。一小部分网络流量也可能通过星间链路（ISL）传输——与地–星链路（20 Gbps）相比，星间链路具有更充足的带宽（100 Gbps）。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-19-sigcomm25/starCDN-480.webp 480w,/assets/img/blogs/2025-10-19-sigcomm25/starCDN-800.webp 800w,/assets/img/blogs/2025-10-19-sigcomm25/starCDN-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-19-sigcomm25/starCDN.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Satellite network </div> <p>在这种情况下，图中区域 1 的用户可能会通过星间链路连接到区域 2 的 CDN 边缘服务器，而该服务器距离其本地位置远得多。除了延迟增加之外，区域 2 的 CDN 服务器可能缓存了不同的内容，并应用了不同的地理访问限制。例如，有研究观察到，非洲用户可能连接到欧洲的地面站，进而连接到缓存了欧洲特定内容的 CDN 服务器。</p> <p>除了因延迟增加导致的性能下降外，传统 CDN 也无法改善 LSN 中卫星链路的利用率。在当前的方案中，如果多个用户观看同一段视频，该视频必须多次上传到卫星，浪费了宝贵的上行链路带宽。</p> <p>作者的关注点：本研究的核心问题是——CDN 技术能否用于提升 LSN 用户的内容分发性能、改善网络资源利用率并降低运营成本？作者回答这一问题的主要思路是探索是否可以在 LEO 卫星上部署边缘服务器系统，以在太空中缓存并向（地面）用户提供内容。然而，实现这一思路面临一个重大挑战：由于卫星每 90 分钟绕地球一圈，这些边缘服务器处于高速运动状态。与传统 CDN 中静止的边缘服务器不同，在作者的场景中，靠近某颗边缘服务器的用户群体每几分钟就会动态变化，其内容访问模式也随之快速改变。重新思考 LSN 环境下 CDN 边缘集群架构，特别是其内容放置、请求路由和缓存机制，是本研究的主要贡献。</p> <p>作者的方法：作者提出了一种名为 StarCDN 的新型空间内容分发网络，专为 LSN 设计。StarCDN 利用卫星日益增强的计算能力，在太空中部署可缓存内容的边缘服务器，从而降低用户访问延迟并提升体验质量。此外，StarCDN 还减少了卫星网络所需的上行带宽，使稀缺的频谱资源可用于满足下行需求。在设计 StarCDN 时，作者解决了三个关键挑战：</p> <p>（i）多卫星冗余问题：为了在远距离提供最佳服务，LSN 通常部署由数千颗卫星组成的密集星座。因此，任意时刻，一名 Starlink 用户可同时连接 10 颗以上的卫星。由于卫星轨道运动，这一卫星集合是动态的，几分钟内就可能发生改变。由于用户可连接到任意可见卫星，为确保用户能可靠地从缓存获取所请求的内容，该内容必须在所有可见卫星上都进行缓存。这会导致缓存命中率低下，并浪费卫星上宝贵的存储空间。</p> <blockquote class="block-tip"> <p>💡 在 Naive LRU 方案（即传统 CDN 直接搬到每颗卫星上）中，每颗卫星独立缓存自己看到的热门内容。但由于用户可能连接任意可见卫星（比如 10 颗），同一个热门对象很可能被多颗卫星重复缓存（冗余）。</p> </blockquote> <p>为应对这一问题，作者提出了一种适用于卫星部署的一致性哈希方案。在 StarCDN 中，作者将每个对象哈希到 K 个（例如 K=4）桶之一，并将每个桶映射到不同的卫星。当一颗卫星收到对其自身桶内数据的请求时，可直接返回数据（缓存命中）或从地面请求数据（缓存未命中）。但如果卫星收到对其他桶中数据的请求，则通过星间链路将请求转发给负责该桶的邻近卫星。作者将桶以网格模式映射到卫星星座上，使得任意桶距离请求卫星最多不超过 $ 2 \left\lfloor \frac{\sqrt{K}}{2} \right\rfloor $ 跳。该一致性哈希方案在优化太空存储利用率的同时，最小化了请求所需的额外延迟。</p> <blockquote class="block-tip"> <p>💡 “对象” 通常指用户请求的内容单元，例如一个网页、一张图片、一个视频片段或者一个安装包文件等。在 StarCDN 中，每个这样的内容单元被视为一个 缓存对象（cacheable object），并被赋予一个唯一的标识符（如 URL 或内容哈希）。StarCDN 对这些对象进行哈希，以决定它们应被缓存在哪颗卫星上。</p> </blockquote> <blockquote class="block-tip"> <p>💡 以 K = 4 为例，此时按照 2 X 2 网格模式映射到整个卫星星座上，在一个周期为 $\sqrt{K} \times \sqrt{K}$ 的网格中，任意桶类型在水平和垂直方向上的最大偏移均为 $\left\lfloor \frac{\sqrt{K}}{2} \right\rfloor$，因此曼哈顿距离（跳数）最多为 $2 \left\lfloor \frac{\sqrt{K}}{2} \right\rfloor$</p> </blockquote> <p>（ii）轨道运动问题：在地面 CDN 中，对象被缓存在物理上靠近用户的服务器中，缓存决策依赖于 CDN 服务区域内对象的本地热度特征。例如，最近最少使用（LRU）或最不经常使用（LFU）的对象会被逐出缓存，为新对象腾出空间。然而，LEO 卫星以约每秒 8 公里的速度绕地球运行，对某一地点的服务时间通常不到 10 分钟。一颗刚刚服务美国用户的卫星，几分钟后可能就在服务欧洲用户。因此，访问模式、热度统计和缓存内容会迅速过时，导致命中率低下。作者的分析表明，由于轨道运动，部署在卫星上的简单 LRU 缓存命中率将低于 60%。</p> <p>为应对轨道运动的影响，StarCDN 引入了一种中继获取（relayed fetch）技术：当发生缓存未命中时，卫星可通过星间链路向具有相同桶 ID 的邻近卫星中继请求。这使得 StarCDN 能够利用刚刚服务过某区域的前一颗卫星所缓存的对象。实际上，这使得缓存内容能够逆着轨道运动方向流动。需要注意的是，这种反向流动不会传播已不再热门的内容，因为中继仅在访问对象发生缓存未命中时才会触发。作者将中继限制在最近邻卫星，以控制由此产生的额外延迟。</p> <p>（iii）一种新颖且公开可用的轨迹生成器，用于捕捉全球分布的 LSN 用户的内容访问模式：评估基于太空的 CDN 设计具有挑战性，因为它需要能反映全球用户内容访问行为的、地理分布广泛的流量轨迹。传统 CDN 设计通常使用一个（或少数几个）地点的轨迹进行评估。然而，卫星绕地球运行，要有效评估 StarCDN，作者需要长时间、多地点的真实轨迹。为此，作者首先从 Akamai CDN 在全球九个地点收集了一天的真实流量轨迹。随后，作者设计了一种新的合成轨迹生成器 SpaceGEN，它利用“足迹描述符”来同时捕捉：（1）单个地点内内容访问的时间变化特征（如对象访问频率）；（2）不同地点之间内容访问的地理差异（如各地访问内容的重叠程度）。此外，SpaceGEN 还能为 CDN 承载的主要流量类型（如网页、视频和软件下载）生成合成轨迹。该轨迹生成器使得对 StarCDN 及其他基线方案进行长期、逼真的评估成为可能。</p> <p>贡献总结：</p> <ul> <li>StarCDN 是首个面向太空的 CDN，旨在提升 LSN 用户的内容访问体验，同时优化地–星网络的资源利用率（第 3 节）。</li> <li>作者设计并评估了一种专为 LSN 定制的一致性哈希方案，以减少卫星缓存中的冗余并提升缓存性能（第 3.2 节）；此外，作者还设计并评估了一种中继获取机制，用以抵消卫星轨道运动带来的负面影响（第 3.3 节）。</li> <li>StarCDN 使用来自全球分布的 LSN 用户的真实内容访问轨迹进行评估。这些合成轨迹由作者开发的新轨迹生成器 SpaceGEN 生成，能够为视频、网页和下载等不同流量类型生成与实际生产轨迹相似的合成数据（第 4 节）。据作者所知，SpaceGEN 是首个在缓存仿真中同时考虑用户内容访问模式的时间变化和地理差异的轨迹生成器。为支持该领域的进一步研究，作者已在 GitHub 上开源了 StarCDN 仿真框架和 SpaceGEN 轨迹生成器。</li> <li>作者使用真实服务器模拟卫星上的 CDN 边缘服务器，并利用 Microsoft CosmicBeats 仿真器模拟卫星轨道运动和覆盖范围（第 5 节）。实验中作者模拟了 1170 颗 Starlink 卫星。结果表明，StarCDN 可将太空中的缓存命中率从 60% 提升至 75%，将卫星网络上行链路利用率最高降低 80%，并将用户感知延迟改善 2.5 倍。</li> </ul> <h3 id="2-3-总结">2-3 总结</h3> <p>StarCDN 是首个专为 LEO 卫星设计的太空 CDN 架构，通过巧妙结合一致性哈希与中继获取，在高速动态的卫星环境中实现了高效、低冗余、低延迟的内容分发，为未来星载计算与边缘服务提供了重要范式。同时，其开源工具（StarCDN 模拟器 + SpaceGEN）也为后续研究奠定了基础。</p> <hr/> <h2 id="sate-low-latency-traffic-engineering-for-satellite-networks">SaTE: Low-Latency Traffic Engineering for Satellite Networks</h2> <p><strong>SaTE：面向卫星网络的低时延流量工程<d-cite key="10.1145/3718958.3750524"></d-cite></strong></p> <h3 id="3-1-摘要">3-1 摘要</h3> <p>本文探讨了大规模低地球轨道（LEO）卫星星座的流量工程（Traffic Engineering, TE）问题。尽管已有大量关于全球云广域网（WAN）的 TE 算法研究，但这些方法通常针对静态网络拓扑设计，且在大规模网络中计算耗时较长。这些局限性使得现有 WAN 的 TE 算法难以适用于拓扑结构快速变化、且需在严格时延约束下计算最优流量分配的大规模卫星网络。</p> <p>为此，作者提出了 SaTE——一种面向大规模卫星网络的低时延 TE 算法，可在毫秒级时延内完成流量分配计算。SaTE 通过构建一个异构图来建模 TE 问题，从而适应动态变化的卫星拓扑。通过剔除图中的冗余关系，SaTE 有效降低了计算开销，使该图能够被图神经网络（GNN）高效学习，并利用 GPU 快速推断出流量分配方案。此外，SaTE 还利用卫星网络拓扑的相似性以及流量需求的地理空间分布特性，以促进模型训练。</p> <p>作者在当前规模最大的卫星星座——拥有 4236 颗卫星的 Starlink 上，通过大量数据驱动的仿真实验对 SaTE 进行了评估。结果表明，SaTE 在满足的流量需求方面提升了 23.5% 以上，平均 TE 计算时延仅为 17 毫秒，相比商用求解器实现了 2738 倍的加速。</p> <h3 id="3-2-引言">3-2 引言</h3> <p>近年来，卫星网络经历了快速发展，为高速互联网接入、直连手机通信以及物联网连接（如全球资产追踪和精准农业）等应用提供了支持。这些卫星网络的规模显著扩大；例如，Starlink 已部署超过 6000 颗卫星，服务用户达 300 万，并计划进一步扩展至 12000 颗。</p> <p>随着星座规模不断扩大、用户流量需求激增，卫星网络必须在卫星节点之间精心分配流量，以提供高吞吐量的服务。现有的卫星网络流量分配方法，例如基于拥塞规避或服务质量约束的路由策略，往往因其分布式特性而在网络中造成拥塞和热点问题。</p> <p>地面广域网中也存在类似问题，这推动了集中式流量工程（Traffic Engineering, TE）算法的最新进展。这些算法将流量分配建模为一个全局优化问题，在预配置路径上计算流量分配，以实现诸如最大化整体吞吐量等目标。尽管面向卫星的软件定义网络为将这些 TE 算法应用于卫星网络铺平了道路，但卫星网络的动态特性给现有 TE 算法带来了挑战。</p> <blockquote class="block-tip"> <p>💡 流量工程（TE）是一类用于优化网络中数据流分配的核心技术，其根本目标是在给定网络拓扑、链路容量和用户流量需求的前提下，合理地将流量分配到多条可行路径上，从而提升整体网络性能。这种性能可以体现为更高的吞吐量、更低的链路拥塞、更均衡的资源利用，或更小的端到端时延。传统上，TE 被建模为一个全局优化问题：网络控制器（如 SDN 控制器）收集全网的流量矩阵和拓扑信息，然后通过求解一个数学规划问题（通常是线性规划），计算出每对通信节点之间的流量应如何在预配置的多条路径上分配，以满足特定的优化目标，例如最大化满足的总流量需求或最小化最大链路利用率。</p> <p>在地面广域网（WAN）中，TE 已被广泛应用，例如 Google 的 B4 网络就通过集中式 TE 实现了接近 100% 的链路利用率。然而，这些传统方法通常假设网络拓扑是静态或变化缓慢的，并且计算复杂度随网络规模急剧上升——对于拥有数千节点的大型网络，商用求解器可能需要数分钟甚至更长时间才能得出解。这种高延迟在动态环境中（如低轨卫星网络）变得不可接受，因为卫星之间的星间链路（ISL）可能每几十毫秒就发生变化，导致预先计算的路径迅速失效。如果 TE 计算速度跟不上拓扑变化的速度，不仅会造成大量链路资源被排除在调度之外，还会引发严重的带宽浪费和性能下降。</p> <p>为应对这一挑战，近年来研究者开始探索基于机器学习的 TE 方法，尤其是利用图神经网络（GNN）。这类方法将 TE 问题转化为一个推理任务：通过训练 GNN 模型学习从网络状态（拓扑、流量、路径）到最优流量分配的映射关系。一旦训练完成，模型可在毫秒级时间内完成推理，极大缩短了 TE 计算延迟。更重要的是，GNN 天然适用于图结构数据，能够泛化到未见过的拓扑，从而适应动态变化的网络环境。然而，早期的 GNN-TE 方法往往依赖额外的全连接神经网络（DNN）层来建模流量与路径之间的关联，而 DNN 要求输入维度固定，无法适应拓扑变化，导致模型泛化能力受限，需要频繁重新训练。</p> <p>因此，一个理想的 TE 算法，尤其是在卫星网络这样的动态大规模场景中，需要同时满足三个关键要求：一是低时延，能在几十毫秒内完成计算；二是强泛化能力，能适应不断变化的拓扑和流量模式，无需频繁重训；三是可扩展性，能高效处理数千节点规模的网络。像 SaTE 这样的新型算法正是围绕这些目标设计的，它通过构建一个完整刻画 TE 问题的异构图，并仅使用 GNN 进行端到端学习，避免了对固定维度 DNN 的依赖，从而实现了高速、灵活且可泛化的流量工程。</p> </blockquote> <p>首先，拓扑频繁变化：与地面广域网的静态拓扑不同，低轨卫星网络（如 Starlink）的拓扑结构变化频繁，变化间隔从数秒到快至每 70 毫秒一次。这些变化使得预配置的网络路径迅速过时，甚至几秒钟的 TE 计算时间都难以跟上拓扑变化的速度，从而导致吞吐量显著下降。</p> <p>其次，流量波动剧烈：面向用户的网络流量具有亚秒级的动态特性，而流量预测本身也难免存在误差。这些因素要求 TE 系统能够实时响应瞬时的流量波动。然而，现有 TE 算法无法同时应对这两种动态性。商用求解器和启发式方法在计算 TE 时，其复杂度随网络规模呈多项式甚至更高阶增长，通常需要数分钟甚至更长时间进行计算——这对于快速变化的流量而言显然太慢了。</p> <p>近期一些基于机器学习的 TE 解决方案在静态广域网上实现了快速计算，但它们训练出的模型通常绑定于单一拓扑结构，每次拓扑变化都需要数小时重新训练，这在拥有海量动态拓扑的卫星网络中是不现实的。因此，目前仍缺乏一种能够适应卫星网络快速变化拓扑和动态流量的低时延 TE 解决方案。</p> <p>为此，作者提出了 SaTE——一种专为动态卫星星座设计的低时延 TE 算法。SaTE 的核心是一种新颖的卫星 TE 图结构，它对整个 TE 问题进行建模，使得仅通过图神经网络（GNN）层即可快速计算 TE，并适应拓扑与流量的频繁变化。此外，SaTE 还利用卫星网络拓扑之间的结构相似性以及用户流量需求的地理空间分布特性，显著减少训练数据集的规模，同时在未见过的拓扑上保持良好的泛化能力。</p> <p>作者在模拟的 4236 颗卫星组成的 Starlink 星座上对 SaTE 进行了详尽的数据驱动仿真评估。结果表明，SaTE 的 TE 计算平均时延仅为 17 毫秒，相比商用求解器实现了 2738 倍的加速，并在满足的流量需求方面至少提升了 11.0%，相比当前最先进的方法提升了超过 23.5%。</p> <p>SaTE 旨在为大规模卫星网络实现低时延的 TE 计算。现有基于 GNN 的 TE 方法通常采用仅捕捉部分 TE 组件（如链路连通性）的图结构，并依赖密集神经网络（DNN）层来建模流量需求与路径关联等关键关系。然而，DNN 层要求输入维度固定，无法泛化到未见过的拓扑，需要频繁重新训练。为解决这一问题，SaTE 构建了一个异构图，完整建模整个 TE 问题。该设计消除了对 DNN 层的依赖，使 GNN 能够独立学习并求解 TE 问题，从而泛化到新拓扑，并适应网络路径和流量需求等关键组件的动态变化。此外，SaTE 通过移除图中的冗余关系来降低计算时延，并在此简化图的基础上构建了一个支持注意力机制的 GNN 用于流量分配。</p> <p>SaTE 还考虑了训练的可行性与效率。对于拥有数千颗卫星的星座，每个训练数据点及其对应的图所需内存（例如 Starlink 需要 335 GB）远超 GPU 容量。此外，如何在多 GPU 上高效训练单个大图仍是一个开放性难题。SaTE 通过剪枝 TE 输入中的非关键元素来解决这一问题，利用全球卫星用户分布的稀疏性——例如，飞越沙漠等人口稀疏区域的卫星通常没有流量需求，导致大量路径处于空闲状态。得益于 SaTE 的图结构设计，这种输入剪枝成为可能，而依赖固定输入尺寸 DNN 的先前方法则无法实现这一点。</p> <p>另一个挑战是 Starlink 拓扑变化数量庞大。若对所有可能拓扑进行训练，不仅容易过拟合，还会带来极高的训练开销。SaTE 转而探索卫星拓扑的相似性：尽管卫星在轨道上位置不断变化，但某些网络拓扑仍保持相似甚至同构。因此，作者开发了一种拓扑剪枝方法，在保证性能的同时大幅减少所需训练数据点数量。通过结合这些剪枝策略，SaTE 显著压缩了数据集规模，使训练变得可行并降低了开销。</p> <p>作者在 Starlink（4236 颗卫星）的模拟环境中对 SaTE 的可行性进行了广泛评估，涵盖仅使用星间激光链路和部分使用地面中继链路的场景。作者为全球 300 万卫星用户生成了包含语音、视频和文件传输等多种服务的流量矩阵，并模拟了不同总体流量负载（如到达强度）下的波动情况。训练好的 SaTE 模型在未见过的拓扑和流量上进行了测试，结果表明：</p> <ul> <li>SaTE 在求解 Starlink 的 TE 问题时，计算时延仅为 17 毫秒，相比商用求解器提速 2738 倍；</li> <li>SaTE 在 Starlink 中满足的流量需求至少高出 11.0%，相比当前最先进的方法提升超过 23.5%；</li> <li>SaTE 在不同规模的卫星网络上均展现出良好的泛化能力，即使在训练时未见过的拓扑和流量下也能保持高性能。</li> </ul> <p>主要贡献包括：</p> <ul> <li>面向动态大规模低轨卫星星座的低时延 TE 计算方案；</li> <li>一种显著减少训练数据量的数据集剪枝技术，便于模型训练；</li> <li>在模拟的超大规模星座（Starlink）上对 SaTE 性能的详尽评估。</li> </ul> <h3 id="3-3-总结">3-3 总结</h3> <p>SaTE通过图建模创新 + 智能剪枝 + GNN端到端学习，首次实现了适用于超大规模动态卫星网络的毫秒级、高精度、强泛化的流量工程。</p> <hr/> <h2 id="small-scale-leo-satellite-networking-for-global-scale-demands">Small-scale LEO Satellite Networking for Global-scale Demands</h2> <p><strong>面向全球需求的小规模低轨卫星组网<d-cite key="10.1145/3718958.3750525"></d-cite></strong></p> <h3 id="4-1-摘要">4-1 摘要</h3> <p>我们真的需要数以万计的低地球轨道（LEO）卫星才能满足巨大的全球互联网需求吗？尽管大规模 LEO 星座网络已被证明可行且具有价值，但其高昂的资本支出、市场垄断风险以及对太空资源不可持续的占用引发了广泛关注。作者的分析表明，由于卫星供给与实际物理需求在空间上分布不均，现有星座中的大多数卫星实际上处于低效利用甚至浪费状态。为此，作者提出了 TinyLEO —— 一种通过动态时空供需匹配来缩减 LEO 网络规模的软件定义解决方案。TinyLEO 通过组合多样但稀疏的轨道，按需稀疏化卫星部署；利用轨道模型预测控制（MPC）隐藏稀疏 LEO 网络的复杂性；并将处理这些复杂性的责任转移至其地理分段任播（geographic segment anycast）机制，从而实现更高的网络可用性、更低的资源浪费、更快的故障切换、更简化的卫星设计以及更灵活的网络编排。作者已将 TinyLEO 原型化为一个面向社区的开源工具包。评估结果表明，TinyLEO 可将现有 LEO 星座规模压缩 2.0–7.9 倍，控制平面开销降低 1–3 个数量级，同时仍能满足相同的需求并保持可比的数据平面性能。</p> <h3 id="4-2-引言">4-2 引言</h3> <p>低地球轨道（LEO）卫星巨型星座正在掀起一场“从太空提供互联网”的革命。凭借数量庞大的卫星和超高容量的链路，它们承诺为地球上大量尚未联网的用户提供高速互联网接入。截至今日，领先的 LEO 巨型星座 SpaceX 的 Starlink 已部署约 7,000 颗卫星和 13,000 条星间链路，总容量达 350 Tbps，为来自 118 个国家的超过 460 万活跃用户提供服务，用户下载速度可达约 100 Mbps。其他 LEO 巨型星座网络，如 OneWeb、GW 和 Kuiper，也正在规划或部署中，以追赶 Starlink 的步伐。</p> <p>尽管取得了巨大成功，LEO 卫星巨型星座也引发了诸多担忧。即使火箭可重复使用和卫星小型化等技术不断进步，其制造、发射和运营成本对大多数互联网服务提供商和国家而言仍然高得难以承受。这种高门槛导致全球 LEO 网络市场被极少数科技巨头垄断，已引起监管机构和发展中国家的关注。更重要的是，巨型星座中数量庞大的卫星严重加剧了近地轨道的拥堵，威胁到全人类对太空资源的可持续与安全使用。</p> <p>为应对这些挑战，作者探索 LEO 巨型星座的替代方案。作者的目标是缩小 LEO 网络规模，使用更少的卫星，同时在大规模乃至全球用户场景下，仍能保持与巨型星座相当的可用性、性能和弹性。这将有助于更多小型互联网服务提供商和国家拥有负担得起的卫星网络，推动该全球市场的民主化，并缓解轨道拥堵，提升太空可持续性与安全性。</p> <p>作者的工作始于一个简单的洞察：LEO 巨型星座中的大多数卫星其实并未被充分利用。为了便于组网和管理，当前大多数巨型星座在空间上几乎均匀地分布其卫星，从而形成全球同质化的网络供给。然而如图 1a 所示，全球网络需求在物理上是高度不均衡的——超过 70% 的用户集中在地球陆地面积的 5% 以内，而覆盖地球表面 70.8% 的海洋区域却几乎没有用户。这种供需错配导致大量部署在低需求区域的卫星处于闲置状态，而仅靠高层负载均衡技术（如本地波束调整或全局流量调度）无法完全消除这种浪费。</p> <p>因此，作者希望通过削减这些未被充分利用的卫星来缩小 LEO 网络规模。显然，最根本的方法是重新安排卫星布局，用更少的卫星匹配不均衡的需求，这需要构建非均匀的 LEO 网络。乍看之下，这项任务似乎简单，因为当前地球静止轨道（GEO）卫星已经实现了类似目标。然而，对于动态的 LEO 卫星网络而言，这带来了两个根本性挑战：</p> <ul> <li>移动性导致供需匹配不稳定：与 GEO 卫星不同，LEO 卫星相对于旋转的地球不可避免地高速、异步移动，导致其对地面的覆盖区域快速变化。这种极端的移动性使得 LEO 星座难以持续匹配不均衡的需求。</li> <li>复杂网络难以使用：非均匀 LEO 网络需在纬度、经度和时间维度上不均匀地部署卫星，以匹配失衡的需求，这会引发异构卫星之间复杂的相对运动，加剧星间链路切换、拓扑更新和路由路径变化，进而威胁 LEO 网络的可用性、效率、弹性和易用性。</li> </ul> <p>作者通过 TinyLEO 应对上述两大挑战。TinyLEO 是一种软件定义的小规模 LEO 组网方案，通过时空维度的供需动态匹配，以较少的卫星满足全球规模的互联网需求。TinyLEO 利用轨道多样性，在极端卫星移动性下仍能实现稳定的按需网络供给。它将高层网络意图（稳定的需求）与底层执行（动态的供给）解耦，从而提升网络可用性。具体而言：</p> <ul> <li>按需 LEO 网络稀疏化：TinyLEO 组合多样但稀疏的轨道，通过时空互补削减卫星冗余（类似于视频压缩）。该过程可借助压缩感知等先进稀疏信号重构技术，高效地从少量重复覆盖地面轨迹（“纹理”）中重建网络供给。</li> <li>控制平面：稳定意图 + 轨道模型预测控制：为保持高网络可用性，TinyLEO 隐藏稀疏 LEO 网络复杂的物理动态，将其控制平面分解为基于地理区域的流量工程意图（用于稳定基础上的拓扑与路由优化）和轨道模型预测控制（MPC）中间层（用于运行时编译为动态网络供给），从而实现简单灵活的编排和在极端 LEO 动态下的低信令开销。</li> <li>数据平面：地理分段任播：TinyLEO 将处理大多数 LEO 动态的责任下放到每颗卫星的本地数据平面——因其更贴近动态源，可实现更及时高效的适配。它通过地理分段任播机制，支持策略合规、灵活的本地（重）路由、负载均衡以及对故障（如太阳风暴或星间链路中断）的快速恢复。</li> </ul> <blockquote class="block-tip"> <ul> <li>控制平面主要负责网络的“决策”功能。它不直接处理用户的数据流量，而是专注于确定数据应该如何在网络中传输。具体来说，控制平面负责计算路由路径、发现网络拓扑结构、维护邻居关系、执行策略配置（如服务质量、安全策略或流量工程），并根据网络状态动态调整转发规则。这些任务通常由路由协议（如OSPF、BGP）、集中式控制器（如SDN控制器）或卫星网络中的轨道预测模型来完成。控制平面的更新频率相对较低，可能以秒甚至分钟为单位，但它为整个网络提供了逻辑上的“地图”和“交通规则”。<br/></li> <li>相比之下，数据平面则承担“执行”角色。它根据控制平面生成的规则，高速、高效地转发用户的数据包。数据平面直接面对终端用户的流量，其核心任务是查表（如转发表或路由表）、封装/解封装数据、执行负载均衡或故障切换等操作。由于需要处理海量数据包，数据平面的设计强调低延迟、高吞吐和硬件加速，通常运行在交换机、路由器或卫星终端的转发引擎中。它的操作是实时的，响应时间往往在微秒级别。</li> </ul> </blockquote> <p>作者已将 TinyLEO 原型化为一个面向社区的开源工具包，供开放研究使用。基于该工具包的评估表明，TinyLEO 可将现有 LEO 巨型星座的规模压缩 2.0–7.9 倍（从而缓解太空拥堵/污染并节省卫星资本支出），控制平面开销降低 1–3 个数量级，同时仍能满足宽带网络需求，并保持可比的数据平面性能。</p> <p>工具包与演示视频已公开发布。</p> <p>伦理声明：本文不涉及伦理问题。</p> <h3 id="4-3-简要概括">4-3 简要概括</h3> <p>TinyLEO 是一种面向全球互联网需求的小规模低轨（LEO）卫星组网方案，其核心目标是在满足大规模甚至全球用户需求的前提下，显著减少所需卫星数量，从而降低部署成本、缓解轨道拥堵，并提升网络的可持续性。它通过三个关键技术实现这一目标：按需稀疏化网络布局、控制平面的稳定意图与轨道模型预测控制，以及数据平面的地理分段任播机制。</p> <p><strong>TinyLEO 如何实现低轨卫星网络的稀疏化？</strong></p> <p>传统巨型星座（如 Starlink）采用均匀分布的卫星布局，导致大量卫星在海洋、极地等低需求区域闲置，造成资源浪费。TinyLEO 的稀疏化策略基于一个关键洞察：全球网络需求在空间和时间上高度不均衡（例如 70% 用户集中在 5% 的陆地），因此无需均匀部署卫星。</p> <p>具体做法如下：</p> <ul> <li>利用多样但稀疏的轨道组合：TinyLEO 不使用密集同构轨道，而是从大量候选的“地球重复轨道”（Earth-repeat orbits）中，选择具有不同倾角（$\beta$）、升交点赤经（$\alpha$）和轨道周期（$T$）的稀疏轨道。这些轨道分别控制卫星覆盖的纬度、经度和时间重复性，通过组合它们，可在时空维度上互补覆盖，精准匹配不均衡需求。</li> <li>将稀疏化建模为压缩感知问题：TinyLEO 将网络供给（卫星部署）与需求（用户分布）的匹配问题，类比为“视频压缩”：用少量“纹理”（即地球重复地面轨迹）重构出满足需求的覆盖。它构建一个超完备的轨道库（称为“纹理库”），然后通过压缩感知（Compressed Sensing）技术，求解一个稀疏优化问题（最小化卫星总数），使得在任意时刻、任意地理区域，卫星供给 ≥ 需求。</li> <li>离线规划 + 增量部署：该稀疏化过程在离线阶段完成，输出一个非均匀但高效的卫星布局。同时支持增量扩展：当新需求出现时，只需在残差需求上继续运行稀疏匹配算法，无需重构整个网络。</li> </ul> <p>评估表明，TinyLEO 可将现有巨型星座规模压缩 2.0–7.9 倍，同时仍满足相同带宽需求。</p> <p><strong>控制平面：稳定意图 + 轨道模型预测控制（MPC）</strong></p> <p>稀疏化后的网络因轨道异构性而动态性更强（卫星相对运动复杂、链路频繁切换），传统控制方式难以应对。TinyLEO 通过解耦“高层意图”与“底层执行”来简化控制：</p> <ul> <li>地理流量工程意图（Geographic Traffic Engineering Intent）：网络操作员不再关心具体哪颗卫星，而是以地理单元（如经纬度网格）为单位定义拓扑和路由策略。例如：“北京到东京之间需 2 条星间链路”、“避开某战区”等。这种意图是稳定且与卫星无关的，屏蔽了底层动态。</li> <li>轨道模型预测控制器（Orbital MPC）：MPC 作为中间层，负责将地理意图“编译”为实时的卫星拓扑配置。它基于轨道力学预测未来一段时间内哪些卫星覆盖哪些区域，并通过三阶段稳定匹配算法（包括卫星-区域匹配、跨区域星间链路匹配、区域内环连接）生成高寿命、低切换频率的物理拓扑。</li> <li>故障快速修复：当发生链路中断或卫星失效时，MPC 接收数据平面上报，仅对受影响的地理区域进行局部重匹配，平均修复时间约 83.8 毫秒。</li> </ul> <p>该设计将控制信令开销降低 1–3 个数量级，远优于传统时空调度型 SDN（如 Aalyria 的 TS-SDN）。</p> <p><strong>数据平面：地理分段任播（Geographic Segment Anycast）</strong></p> <p>为应对 LEO 网络极端动态性，TinyLEO 将大部分实时决策下放到数据平面：</p> <ul> <li>基于地理的分段路由（Segment Routing）：每个数据包携带一个地理路径列表（如：[上海 → 东京 → 洛杉矶]），而非传统 IP 路由表。任何覆盖“上海”的卫星都可接收该包，并根据下一跳“东京”进行转发。</li> <li>任播转发机制：在每个地理单元内，所有卫星组成一个逻辑环。若当前卫星无法直连下一跳区域，它会沿环将包传递给其他“网关卫星”，直到找到能连接下一跳的卫星。这实现了无状态、本地化、高容错的转发。</li> <li>优势： <ul> <li>快速故障恢复：本地绕行，无需等待控制平面（毫秒级 vs 秒级）；</li> <li>高资源利用率：任播允许多颗卫星分担负载；</li> <li>低控制开销：无需维护全网路由状态；</li> <li>策略兼容：支持最短路径、跨洋卸载、多路径等高级路由策略。</li> </ul> </li> </ul> <h3 id="4-4-总结">4-4 总结</h3> <p>TinyLEO 通过 “稀疏供给匹配不均衡需求” 的核心思想，结合 控制平面的意图抽象与轨道 MPC、数据平面的地理任播转发，成功在大幅缩减卫星数量的同时，保持了与巨型星座相当的性能、可用性和灵活性。它不仅是一种技术方案，更是一种面向可持续、普惠太空互联网的新范式。</p>]]></content><author><name></name></author><category term="科研"/><category term="低轨卫星网络"/><summary type="html"><![CDATA[本文整理了 2025 年 SIGCOMM 主会议中与低轨卫星网络相关的论文。]]></summary></entry><entry><title type="html">低轨卫星网络架构</title><link href="https://cresc3nt.github.io/blog/2025/leo-net-arch/" rel="alternate" type="text/html" title="低轨卫星网络架构"/><published>2025-10-07T10:00:00+00:00</published><updated>2025-10-07T10:00:00+00:00</updated><id>https://cresc3nt.github.io/blog/2025/leo-net-arch</id><content type="html" xml:base="https://cresc3nt.github.io/blog/2025/leo-net-arch/"><![CDATA[<h2 id="低轨卫星参数">低轨卫星参数</h2> <p>所有现代低轨宽带星座均采用<strong>圆形轨道</strong>，以确保全球服务的一致性和简化轨道管理。</p> <aside> <p>这篇文章主要参考了<a href="https://bdebopam.github.io/" target="_blank">Debopam Bhattacherjee 博士</a>的毕业论文<d-cite key="DBLP:phd/basesearch/Bhattacherjee21"></d-cite>中的第二章。</p> </aside> <p>描述一颗低轨卫星主要涉及四个参数：</p> <table class="table table-sm table-bordered"> <thead> <tr> <th class="text-center">参数</th> <th class="text-center">符号</th> <th class="text-center">说明</th> </tr> </thead> <tbody> <tr> <td class="text-center">Inclination (轨道倾角)</td> <td class="text-center">$i$</td> <td class="text-start">轨道面与赤道面夹角，决定纬度覆盖范围</td> </tr> <tr> <td class="text-center">Height (轨道高度)</td> <td class="text-center">$h$</td> <td class="text-start">卫星距地表高度，影响延迟、寿命与速度</td> </tr> <tr> <td class="text-center">Minimum angle of elevation (最小仰角)</td> <td class="text-center">$e$</td> <td class="text-start">地面站可见卫星的最低仰角，权衡覆盖与信号质量</td> </tr> <tr> <td class="text-center">Phase offset (相位偏移)</td> <td class="text-center">$p$</td> <td class="text-start">相邻轨道卫星的相对位置，用于均匀分布</td> </tr> </tbody> </table> <h3 id="轨道倾角-inclination-i">轨道倾角 (Inclination, $i$)</h3> <ul> <li>定义：卫星轨道平面与地球赤道平面之间的夹角（卫星从南向北穿越赤道时测量）。</li> <li>典型值： <ul> <li>90°：极地轨道（覆盖全球，包括两极）。</li> <li>0-90°：顺行轨道（prograde），不经过极地，更多时间在低纬度地区。</li> <li>90-180°：逆行轨道（retrograde），如太阳同步轨道（Sun-synchronous orbit），每天同一地方时经过同一地点，常用于遥感。</li> </ul> </li> <li>设计考量： <ul> <li>避免赤道附近干扰：GEO卫星集中在赤道上空，因此LEO星座通常避免过低的倾角（如&lt;25°）。</li> <li>发射成本：发射场纬度限制了最小可行倾角（如SpaceX在德州Boca Chica发射，纬度≈26°N，因此倾角不能低于此值，否则需昂贵变轨）。</li> </ul> </li> </ul> <p>下图展示了5条极地轨道与五条非极地轨道。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-07-leo-net-arch/polar-and-inclined-orbits-480.webp 480w,/assets/img/blogs/2025-10-07-leo-net-arch/polar-and-inclined-orbits-800.webp 800w,/assets/img/blogs/2025-10-07-leo-net-arch/polar-and-inclined-orbits-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-07-leo-net-arch/polar-and-inclined-orbits.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> polar and inclined orbits </div> <h3 id="轨道高度-height-h">轨道高度 (Height, $h$)</h3> <ul> <li> <p>定义：卫星距地球表面的高度。</p> </li> <li> <p>低轨范围：$h$ ≤ 2,000 km（典型值：550–1,300 km）。</p> </li> <li> <p>影响：</p> <ul> <li>速度与周期：高度越低，速度越快（约27,000 km/h），轨道周期越短（约100分钟）。</li> <li>大气阻力：高度越低，大气阻力越大，需频繁轨道维持（但利于退役后快速离轨）。</li> <li>辐射环境：较低轨道可避开范艾伦辐射带，减少辐射损伤。</li> <li>监管：受FCC（美国）和ITU（国际）监管。</li> </ul> </li> </ul> <h3 id="最小仰角-minimum-elevation-angle-e">最小仰角 (Minimum Elevation Angle, $e$)</h3> <ul> <li> <p>定义：地面站能与卫星通信所需的最低仰角（相对于地平线）。</p> </li> <li> <p>作用：决定卫星对地面的覆盖范围（coverage cone）。</p> </li> <li>权衡： <ul> <li>$e$ 越小 → 覆盖范围大，可用卫星数多，但：路径损耗大（信号弱）、易受地形/建筑物遮挡、潜在干扰增加。</li> <li>$e$ 越大 → 信号质量好、干扰少，但需更多卫星保证覆盖。</li> </ul> </li> <li>实例： <ul> <li>Starlink初期用 $e$ = 25°，后期提升至 40°。</li> <li>Telesat计划用 $e$ = 10°（但可行性存疑）。</li> </ul> </li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-07-leo-net-arch/radius-of-coverage-480.webp 480w,/assets/img/blogs/2025-10-07-leo-net-arch/radius-of-coverage-800.webp 800w,/assets/img/blogs/2025-10-07-leo-net-arch/radius-of-coverage-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-07-leo-net-arch/radius-of-coverage.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> radius-of-coverage </div> <h3 id="相位偏移-phase-offset-p-or-varphi">相位偏移 (Phase Offset, $p$ or $\varphi$)</h3> <ul> <li> <p>描述相邻轨道上卫星的相对位置，需要设置合理的参数以避免碰撞。在一些研究中，也会用相位因子 $F$ 来表示，其实际含义与相位偏移相同。</p> <ul> <li>🛰️ 在低轨卫星星座中，相位偏移（phase offset）是一个介于 0 到 1 之间的无量纲参数，用于控制相邻轨道面上卫星穿越赤道时刻的相对关系。⏱️</li> <li>➤ 若为 0，则相邻轨道面的第 $n$ 颗卫星同时过赤道；</li> <li>➤ 若为 1，则第 $n$ 颗卫星与下一轨道面的第 $n+1$ 颗卫星同时过赤道。</li> <li>📐 对于含 $P$ 个轨道面的均匀星座，相位偏移必须取 $1/P$ 的整数倍（即 $F/P$，$F$ 为整数相位因子）。</li> <li>🔧 该参数不改变轨道高度或倾角，仅决定不同轨道面间卫星的“错位”程度，从而影响覆盖均匀性与碰撞风险。⚠️</li> <li>🌍 例如，Starlink 初始壳层（32 个轨道面）采用相位偏移 5/32（$F$=5），而非 0.5，以避免偶数相位因子导致的轨道交叉点近距离接近问题！✨</li> </ul> </li> <li> <p>大部分研究中设 $p$ = 0.5，使卫星在壳层（shell）中分布最均匀，最大化覆盖，避免处理复杂的相位优化，从而更专注与拓扑或路由问题的研究。</p> </li> </ul> <blockquote class="block-tip"> <p>💡 除此之外，一个卫星轨道还应该包含七个要素：包括一个历元和六个开普勒要素，但在低轨卫星网络的研究中所有的轨道均为圆形轨道，所以无需特别关注其他参数。</p> </blockquote> <h2 id="低轨卫星星座">低轨卫星星座</h2> <p>如果每颗卫星轨道参数（高度、倾角等）都不同，它们之间的相对运动将非常复杂。这种状态下星间链路（ISL）只能短暂维持，频繁切换（handoff）会导致连接中断、延迟飙升（切换可能耗时数十秒）。因此需要将卫星分组为壳层——每个壳层内所有卫星共享相同的轨道高度与轨道倾角。</p> <p>一个低轨卫星星座 $C$ 由 $s$ 个壳层（shell）构成，一个壳层由以下四个参数完全定义：</p> <table class="table table-sm table-bordered"> <thead> <tr> <th class="text-center">参数</th> <th class="text-center">符号</th> <th class="text-center">说明</th> </tr> </thead> <tbody> <tr> <td class="text-center">Number of orbits (轨道数量)</td> <td class="text-center"><em>o</em></td> <td class="text-start">一个壳层中包含的轨道面数</td> </tr> <tr> <td class="text-center">Satellites per orbit (每轨卫星数)</td> <td class="text-center"><em>n</em></td> <td class="text-start">每条轨道上均匀分布的卫星数量</td> </tr> <tr> <td class="text-center">Inclination (轨道倾角)</td> <td class="text-center"><em>i</em></td> <td class="text-start">壳层中所有轨道共用的倾角</td> </tr> <tr> <td class="text-center">Height (轨道高度)</td> <td class="text-center"><em>h</em></td> <td class="text-start">壳层中所有卫星的运行高度</td> </tr> </tbody> </table> <p>可以参考<a href="/assets/html/blogs/2025-10-07-leo-net-arch/leo_shell_example1.html" target="_blank">示例1</a>与<a href="/assets/html/blogs/2025-10-07-leo-net-arch/leo_shell_example2.html" target="_blank">示例2</a>，它们分别描述了4条轨道与32条轨道时的壳层样例。</p> <blockquote class="block-tip"> <p>💡 许多研究中使用 $o^2$ 来表示星座的大小，代表有 $o$ 条轨道，同时每条轨道上有 $n = o$ 颗卫星。这种对称设计便于仿真中控制变量，同时能直观反映星座密度对延迟和连通性的影响。</p> </blockquote> <h3 id="星座连接性-constellation-connectivity">星座连接性 (Constellation Connectivity)</h3> <p>现代低轨卫星星座的连接性建立在两类链路之上：地星链路（Ground-Satellite Links, GSL）与星间链路（Inter-Satellite Links, ISL）。</p> <p>GSL 使用射频而非激光，因其对云层和降水更具鲁棒性。每颗卫星配备多个天线，每个天线支持多个可软件定义的窄波束（如下图所示），能够动态调整方向、形状与频段分配，以最大化吞吐量。地面站类型决定其连接能力：普通用户终端通常只有一个相控阵天线，一次仅连一颗卫星；而网关或企业终端则使用多个抛物面天线，可同时连接多颗卫星以提升容量和可靠性。GSL 带宽随星地距离 $d_s$ 增大而衰减，建模为与 $h^2/d_s^2$ 成正比；只有当用户位于卫星星下点（nadir）且无其他用户共享时，才能获得满带宽。例如，Starlink 宣称其单星下行容量约为 20 Gbps。</p> <blockquote class="block-tip"> <p>💡 卫星的星下点（nadir）是指从卫星向地心方向作一条直线，该直线与地球表面相交的点，也就是卫星正下方的地表位置。在轨道力学和卫星通信中，星下点具有特殊意义：此时地面站与卫星之间的距离最短，信号路径损耗最小，通信质量最好。例如，在计算地星链路（GSL）带宽时，只有当用户终端恰好位于卫星的星下点、且该卫星波束覆盖范围内没有其他用户共享资源时，才能获得该链路的最大可用带宽。随着地面站偏离星下点，星地距离增加，路径损耗增大，可用带宽随之下降，通常建模为与 $h^2/d_s^2$ 成正比（其中 $h$ 为轨道高度，$d_s$为实际星地距离）。因此，星下点是评估卫星覆盖性能和链路质量的关键参考位置。</p> </blockquote> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-07-leo-net-arch/GSL-480.webp 480w,/assets/img/blogs/2025-10-07-leo-net-arch/GSL-800.webp 800w,/assets/img/blogs/2025-10-07-leo-net-arch/GSL-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-07-leo-net-arch/GSL.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> GSL </div> <p>相比之下，ISL 是实现低延迟端到端通信的关键。当前行业普遍采用 “+Grid” 拓扑：每颗卫星通过激光链路连接 4 个邻居——同轨道前后各 1 颗，相邻轨道各 1 颗。这种结构在卫星相对速度较低时可维持长期稳定连接，避免频繁切换。ISL 使用激光，因其波束极窄、发散小、干扰低。但其长度受物理限制：激光不能进入 80 km 以下大气层（中层大气含水汽，会散射光束），因此给定轨道高度 $h_ S$ ，可计算最大 ISL 距离。例如，Starlink S1（$h$=550 km）的最大 ISL 长度约为 5,014 km。在稀疏星座中，ISL 仅限相邻轨道；但在密集星座中，一颗卫星理论上可连接上百颗其他卫星。然而，实际部署仍受限于：</p> <ul> <li>功耗约束：更长距离需更高发射功率；</li> <li>设备重量与成本：大功率激光终端更重、更贵；</li> <li>热管理与指向精度：高速运动下维持激光对准极具挑战。</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-07-leo-net-arch/ISL-480.webp 480w,/assets/img/blogs/2025-10-07-leo-net-arch/ISL-800.webp 800w,/assets/img/blogs/2025-10-07-leo-net-arch/ISL-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-07-leo-net-arch/ISL.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> ISL </div> <p>因此，尽管物理可见性允许更多连接，工程现实仍使 +Grid 成为主流选择。值得注意的是，若无 ISL，星座只能采用“弯管模式”（bent-pipe）——数据数据要么通过最近的基站（连接到互联网）传输，要么经过卫星和地面站的多次转发，导致跨洲通信延迟显著增加。Starlink 已发射具备 ISL 能力的卫星，但大规模运行细节尚未公开。</p> <h3 id="系统动态性-system-dynamics">系统动态性 (System Dynamics)</h3> <p>LEO 星座的高速运动带来了显著的系统动态性。以 550 km 高度为例，卫星速度高达 27,306 km/h，约每 100 分钟绕地球一圈。这种高速导致：</p> <ul> <li>地星链路仅能维持几分钟，需频繁切换；</li> <li>ISL 长度和延迟持续变化，尤其在高纬度地区，不同轨道卫星因几何汇聚而相对速度突变；</li> <li>端到端路径所经卫星、GSL 与 ISL 距离、总延迟均随时间演化。</li> </ul> <p>这种动态性虽带来挑战，却具有高度可预测性（基于开普勒轨道力学），与地面移动网络（如蜂窝网）中用户随机移动有本质不同。更重要的是，LEO 网络的移动主体是网络核心本身——卫星即路由器，而非仅终端移动。此外，其规模远超传统移动系统：数千颗具备 Tbps 级交换能力的“飞行节点”在全球尺度上协同工作。这些特性使得 LEO 网络既不能直接套用现有协议，也为基于轨道预测的预计算路由、动态拓扑优化等新方法提供了独特机会。</p> <h3 id="干扰影响-impact-of-interference">干扰影响 (Impact of Interference)</h3> <p>尽管 LEO 星座密度高、频谱复用频繁，但现行的主流星座已部署一整套在线、软件定义的干扰抑制机制，包括：</p> <ul> <li>低轨道高度缩小波束覆盖范围；</li> <li>极窄波束（Starlink：1.0°–1.5°）减少空间重叠；</li> <li>多天线 + 多波束支持灵活频段分配；</li> <li>空间复用策略：相同频段可在角度分离 ≥10° 的区域复用；</li> <li>动态波束分裂/合并以应对负载与干扰变化；</li> <li>优先服务高仰角用户（信号强、路径损耗小）；</li> <li>在轨流量重路由避开拥塞或干扰区域。</li> </ul> <p>鉴于这些成熟且可调的缓解手段，现有的研究聚焦于拓扑结构、动态路由与端到端延迟等核心网络问题。</p> <h2 id="低轨卫星的低延迟优势与应用价值">低轨卫星的低延迟优势与应用价值</h2> <p>低轨（LEO）卫星星座不仅是一种全球覆盖的通信基础设施，更代表了一种突破现有地面光纤网络延迟瓶颈的新范式。当前互联网的高延迟部分源于光纤路径的物理限制：光在光纤中传播速度仅为真空中光速 $c$ 的约 2/3 ，且实际铺设路径受地形与经济因素制约，往往严重绕行。即便假设使用所有已知光纤并沿最短路径传输（即“f-latency”），其延迟仍显著高于理论极限（“c-latency”，即光在真空中沿大圆传播所需时间）。LEO 星座则通过近真空环境中的射频与激光链路，以接近光速 $c$ 直线传输数据，在长距离通信中展现出显著优势。仿真表明，一个中等规模的 LEO 星座（如 30²，即 900 颗卫星）在华盛顿特区至法兰克福的路径上，其端到端延迟几乎总是优于最优光纤（32.6 ms）；而更密集的星座（如 40²、50²）甚至能匹配或超越高频交易（HFT），逼近 c-latency（21.7 ms）。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-10-07-leo-net-arch/latency-example-480.webp 480w,/assets/img/blogs/2025-10-07-leo-net-arch/latency-example-800.webp 800w,/assets/img/blogs/2025-10-07-leo-net-arch/latency-example-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-10-07-leo-net-arch/latency-example.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 华盛顿-法兰克福端到端通信延迟 </div> <blockquote class="block-tip"> <p>📊 这张图展示了不同星座大小下华盛顿特区与法兰克福之间的延迟。CDF 曲线越靠左、越陡峭，说明该网络的延迟表现越好、越稳定。<br/> 纵轴（CDF）：累积分布函数，这里表示延迟小于或等于横轴值的概率。例如，如果某条曲线在横轴 35 ms 处对应的 CDF 值是 0.8，那就意味着，在这个星座配置下，有 80% 的时间，端到端延迟都小于或等于 35 毫秒。<br/> c-latency：光在真空中沿地球表面最短路径（大圆弧）传播所需的时间，是这是理论上可能达到的最低延迟极限。<br/> f-latency：理想光纤网络能达到的最佳延迟，不考虑现实中的路由绕行或设备处理延迟。<br/> Hibernia：实际存在的、专为低延迟设计的跨大西洋海底光缆——Hibernia Express。<br/> Internet：指当前全球公共互联网的实际平均延迟。<br/> HFT：High-Frequency Trading（高频交易）行业的实际观测延迟。<br/></p> </blockquote> <p>这种低延迟并非仅是技术指标的提升，而是对现代互联网应用体验与商业价值的直接赋能。许多关键应用——如增强/虚拟现实（AR/VR）、远程手术、实时协同创作——对交互延迟极为敏感，毫秒级的改善即可决定成败。即使是看似普通的网页浏览，其用户体验也与延迟高度相关：实验表明，在带宽固定为 10 Mbps 的条件下，客户端与服务器间 RTT 每增加 10 毫秒，页面 85% 视觉内容完成加载的时间（viz85）。这一线性关系意味着，LEO 在跨洲通信中节省的数十毫秒，可转化为显著更快的页面加载速度。而商业影响更为直接：Google 发现搜索延迟增加 400 毫秒会导致用户搜索量下降 0.7%；亚马逊测算每增加 100 毫秒延迟，销售额下降约 1%。正因如此，内容分发网络（CDN）将“降低延迟”作为核心价值主张。</p> <p>综上，LEO 星座通过其独特的空间路径与近光速传播能力，不仅在物理层面提供了超越地面光纤的低延迟可能性，更在应用层面回应了互联网对极致交互体验与商业效率的迫切需求。这一“技术潜力—应用价值”的双重优势，构成了推动 LEO 网络研究与部署的核心驱动力。</p>]]></content><author><name></name></author><category term="科研"/><category term="低轨卫星网络"/><category term="无线通信"/><summary type="html"><![CDATA[本文将对低轨卫星网络架构进行简单梳理。]]></summary></entry><entry><title type="html">在云服务器上部署 RustDesk 自建服务器</title><link href="https://cresc3nt.github.io/blog/2025/rustdesk-server/" rel="alternate" type="text/html" title="在云服务器上部署 RustDesk 自建服务器"/><published>2025-10-02T10:00:00+00:00</published><updated>2025-10-02T10:00:00+00:00</updated><id>https://cresc3nt.github.io/blog/2025/rustdesk-server</id><content type="html" xml:base="https://cresc3nt.github.io/blog/2025/rustdesk-server/"><![CDATA[<h2 id="rustdesk-服务器介绍">RustDesk 服务器介绍</h2> <p>RustDesk 服务器有两个可执行程序：</p> <ul> <li><code class="language-plaintext highlighter-rouge">hbbs</code> - RustDesk ID 注册服务器，是管各个客户端 ID 的，每个客户端都有一个唯一的 ID 。</li> <li><code class="language-plaintext highlighter-rouge">hbbr</code> - RustDesk 中继服务器，是负责检测、中转各个客户端连接和数据传输。</li> </ul> <p>在部署前，请务必在保证云服务器开放了以下端口：</p> <ul> <li>TCP: 21115-21119</li> <li>UDP: 21116</li> </ul> <p>RustDesk Server 的进程占用端口情况如下：</p> <ul> <li><code class="language-plaintext highlighter-rouge">hbbs</code> - 21115(TCP), 21116(TCP/UDP), 21118(TCP)</li> <li><code class="language-plaintext highlighter-rouge">hbbr</code> - 21117(TCP), 21119(TCP)</li> </ul> <p>每个端口都有其各自的作用：</p> <ul> <li>21115(TCP) - 用作 NAT 类型测试</li> <li>21116(UDP) - 用作 ID 注册 与 心跳服务</li> <li>21116(TCP) - 用作 TCP打洞 与 连接服务</li> <li>21117(TCP) - 用作中继服务</li> <li>21118/21119(TCP) - 为了支持网页客户端</li> </ul> <blockquote class="block-tip"> <p>💡 如果启动的时候不加 <code class="language-plaintext highlighter-rouge">-k _</code> 参数，则不使用 <code class="language-plaintext highlighter-rouge">key</code> 也可以连接服务器。</p> </blockquote> <h2 id="环境配置">环境配置</h2> <p>设置时区（可选但推荐）</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="c"># 设置时区为东八区的上海</span>
<span class="nb">sudo </span>timedatectl set-timezone Asia/Shanghai
<span class="nb">date</span> +%Z  <span class="c"># 应输出 CST</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>更新系统并安装基础依赖</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">sudo </span>apt update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt upgrade <span class="nt">-y</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>curl htop wget unzip <span class="nt">-y</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>安装 Node.js 与 npm</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="nb">sudo </span>apt <span class="nb">install </span>nodejs npm <span class="nt">-y</span>
node <span class="nt">-v</span>  <span class="c"># 查看 Node.js 版本</span>
npm <span class="nt">-v</span>   <span class="c"># 查看 npm 版本</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>安装 pm2</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">sudo </span>npm <span class="nb">install</span> <span class="nt">-g</span> pm2
pm2 <span class="nt">--version</span>  <span class="c"># 查看pm2的版本</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>创建 pm2 开机启动脚本</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>pm2 completion <span class="nb">install</span>  <span class="c"># 根据提示信息完成</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>设置 pm2 开机启动</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">sudo env </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/bin /usr/local/lib/node_modules/pm2/bin/pm2 startup systemd <span class="nt">-u</span> <span class="k">${</span><span class="nv">USER</span><span class="k">}</span> <span class="nt">--hp</span> <span class="k">${</span><span class="nv">HOME</span><span class="k">}</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>pm2-<span class="k">${</span><span class="nv">USER</span><span class="k">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="安装并部署-rustdesk-server">安装并部署 RustDesk-Server</h2> <p>执行以下命令自动获取 GitHub 上 <code class="language-plaintext highlighter-rouge">rustdesk/rustdesk-server</code> 仓库的最新发布版本并下载</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="nv">REPO</span><span class="o">=</span><span class="s2">"rustdesk/rustdesk-server"</span>
<span class="nv">latest_tag</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> https://api.github.com/repos/<span class="nv">$REPO</span>/releases/latest | <span class="nb">grep</span> <span class="s1">'"tag_name":'</span> | <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s/.*"([^"]+)".*/\1/'</span><span class="si">)</span>
<span class="nb">echo</span> <span class="s2">"Using rustdesk-server version </span><span class="nv">$latest_tag</span><span class="s2">"</span>

wget https://github.com/<span class="nv">$REPO</span>/releases/download/<span class="nv">$latest_tag</span>/rustdesk-server-linux-amd64.zip
</pre></td></tr></tbody></table></code></pre></figure> <p>解压并整理文件</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre>unzip rustdesk-server-linux-amd64.zip
<span class="nb">mv </span>amd64 ~/rustdesk-server
<span class="nb">rm</span> <span class="nt">-f</span> rustdesk-server-linux-amd64.zip
</pre></td></tr></tbody></table></code></pre></figure> <p>此时，RustDesk 的两个核心可执行文件 <code class="language-plaintext highlighter-rouge">hbbs</code> 和 <code class="language-plaintext highlighter-rouge">hbbr</code> 已位于 <code class="language-plaintext highlighter-rouge">~/rustdesk-server/</code> 目录下。</p> <p>进入 RustDesk 目录并启动两个服务</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="nb">cd</span> ~/rustdesk-server
pm2 start hbbs <span class="nt">--</span> <span class="nt">-k</span> _
pm2 start hbbr <span class="nt">--</span> <span class="nt">-k</span> _
</pre></td></tr></tbody></table></code></pre></figure> <blockquote class="block-tip"> <p>💡 <code class="language-plaintext highlighter-rouge">-k _</code>：表示不启用密钥验证（即客户端无需填写密钥即可连接）。若需启用密钥认证，可替换 <code class="language-plaintext highlighter-rouge">_</code> 为自定义密钥，如 <code class="language-plaintext highlighter-rouge">-k mysecret123</code> 。</p> </blockquote> <p>保存 PM2 进程状态（用于开机恢复）</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>pm2 save
</pre></td></tr></tbody></table></code></pre></figure> <p>此命令会将当前运行的进程列表保存，配合之前配置的 <code class="language-plaintext highlighter-rouge">pm2 startup</code>，确保系统重启后服务自动恢复。</p> <p>验证服务是否正常运行</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>pm2 list
</pre></td></tr></tbody></table></code></pre></figure> <p>应看到类似如下输出</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>┌────┬──────────┬─────────────┬─────────┬─────────┬──────────┐
│ <span class="nb">id</span> │ name     │ namespace   │ version │ mode    │ status   │
├────┼──────────┼─────────────┼─────────┼─────────┼──────────┤
│ 0  │ hbbs     │ default     │ N/A     │ fork    │ online   │
│ 1  │ hbbr     │ default     │ N/A     │ fork    │ online   │
└────┴──────────┴─────────────┴─────────┴─────────┴──────────┘
</pre></td></tr></tbody></table></code></pre></div></div> <p>若状态为 <code class="language-plaintext highlighter-rouge">online</code>，说明服务已成功启动。</p> <p>此时查看 rustdesk-server 目录，可以看到生成了一些数据库文件和一个证书文件</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>rustdesk-server
├── db_v2.sqlite3
├── db_v2.sqlite3-shm
├── db_v2.sqlite3-wal
├── hbbr
├── hbbs
├── id_ed25519
├── id_ed25519.pub
└── rustdesk-utils
</pre></td></tr></tbody></table></code></pre></div></div> <p>需要拷贝公钥文件 <code class="language-plaintext highlighter-rouge">id_ed25519.pub</code> 中的内容（例如<code class="language-plaintext highlighter-rouge">C6bJn7*******************50nCK3y4=</code>），用于接下来的本地配置。</p> <h2 id="客户端配置">客户端配置</h2> <p>打开 RustDesk 客户端，点击左上角 <code class="language-plaintext highlighter-rouge">ID</code> 旁边的三点图标，进入设置。</p> <p>切换到 <code class="language-plaintext highlighter-rouge">网络</code> 选项卡，点击 <code class="language-plaintext highlighter-rouge">ID/中继服务器</code> ：</p> <ul> <li>在 <code class="language-plaintext highlighter-rouge">ID 服务器</code> 字段中填写你的云服务器公网 IP 地址或域名。</li> <li>在 <code class="language-plaintext highlighter-rouge">key</code> 字段中填写刚才拷贝的公钥内容（例如 <code class="language-plaintext highlighter-rouge">C6bJn7*******************50nCK3y4</code> ）</li> </ul> <p>点击 <code class="language-plaintext highlighter-rouge">确认</code>，回到主页，等待客户端与服务端建立连接，即可完成配置。</p>]]></content><author><name></name></author><category term="工程"/><category term="RustDesk"/><category term="远程桌面"/><category term="云服务器"/><summary type="html"><![CDATA[RustDesk 作为一款开源、安全、跨平台的远程桌面软件，因其轻量、高效、无广告且支持自建服务器等特性，受到越来越多用户的青睐。自建 RustDesk 服务器不仅可以摆脱对官方服务器的依赖，还能完全掌控连接数据、提升连接速度与稳定性，尤其适合对隐私和性能有较高要求的个人或团队使用。]]></summary></entry><entry><title type="html">在云服务器上部署私有 Overleaf 服务器</title><link href="https://cresc3nt.github.io/blog/2025/overleaf-server/" rel="alternate" type="text/html" title="在云服务器上部署私有 Overleaf 服务器"/><published>2025-09-12T10:00:00+00:00</published><updated>2025-09-12T10:00:00+00:00</updated><id>https://cresc3nt.github.io/blog/2025/overleaf-server</id><content type="html" xml:base="https://cresc3nt.github.io/blog/2025/overleaf-server/"><![CDATA[<h2 id="安装-docker-与-docker-compose">安装 Docker 与 Docker Compose</h2> <p>首先更新系统</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>apt update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt upgrade <span class="nt">-y</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>安装必要依赖</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> apt-transport-https ca-certificates curl software-properties-common
</pre></td></tr></tbody></table></code></pre></figure> <p>添加 Docker 官方 GPG 密钥</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class="nb">sudo </span>gpg <span class="nt">--dearmor</span> <span class="nt">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg
</pre></td></tr></tbody></table></code></pre></figure> <p>添加阿里云的 Docker APT 源（针对 Ubuntu 22.04 jammy）</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">echo</span> <span class="s2">"deb [arch=</span><span class="si">$(</span>dpkg <span class="nt">--print-architecture</span><span class="si">)</span><span class="s2"> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> stable"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/docker.list <span class="o">&gt;</span> /dev/null
</pre></td></tr></tbody></table></code></pre></figure> <p>现在 <code class="language-plaintext highlighter-rouge">$(lsb_release -cs)</code> 会自动输出 <code class="language-plaintext highlighter-rouge">jammy</code>（Ubuntu 22.04 的代号）。</p> <p>接下来更新包索引并安装 Docker</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</pre></td></tr></tbody></table></code></pre></figure> <p>这里我们安装的是 <code class="language-plaintext highlighter-rouge">docker-compose-plugin</code>（新版），不是老版独立 <code class="language-plaintext highlighter-rouge">docker-compose</code>。它通过 <code class="language-plaintext highlighter-rouge">docker compose</code>（注意中间无横杠）命令使用，是官方推荐方式。</p> <p>将当前用户加入 docker 组</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nb">sudo </span>usermod <span class="nt">-aG</span> docker <span class="nv">$USER</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>这个时候需要退出并重新登录 SSH 会话，才会使权限生效。</p> <p>验证安装</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>docker run hello-world
</pre></td></tr></tbody></table></code></pre></figure> <p>看到 <code class="language-plaintext highlighter-rouge">Hello from Docker!</code> 即表示成功！</p> <h2 id="配置-docker-镜像加速器">配置 Docker 镜像加速器</h2> <p>国内服务器访问 Docker Hub 经常超时，必须配置镜像加速器。首先创建配置文件</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="nb">sudo mkdir</span> <span class="nt">-p</span> /etc/docker

<span class="nb">sudo tee</span> /etc/docker/daemon.json <span class="o">&lt;&lt;-</span><span class="sh">'</span><span class="no">EOF</span><span class="sh">'
{
  "registry-mirrors": [
    "https://docker.1ms.run",
    "https://docker.1panel.live/"
  ]
}
EOF</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>重启 Docker</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl restart docker
</pre></td></tr></tbody></table></code></pre></figure> <p>验证加速器</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>docker info | <span class="nb">grep</span> <span class="nt">-A</span> 5 <span class="s2">"Registry Mirrors"</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>应看可以到配置的镜像地址。</p> <h2 id="部署-overleaf-toolkit">部署 Overleaf Toolkit</h2> <p>Overleaf 官方提供了 <code class="language-plaintext highlighter-rouge">overleaf/toolkit</code> 工具包，简化了部署流程。</p> <p>首先克隆仓库</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre>git clone git@github.com:overleaf/toolkit.git ./overleaf-toolkit
<span class="nb">cd </span>overleaf-toolkit
</pre></td></tr></tbody></table></code></pre></figure> <p>初始化配置</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>bin/init
</pre></td></tr></tbody></table></code></pre></figure> <p>这会在 <code class="language-plaintext highlighter-rouge">config/</code> 目录下生成 <code class="language-plaintext highlighter-rouge">overleaf.rc</code>, <code class="language-plaintext highlighter-rouge">variables.env</code>, <code class="language-plaintext highlighter-rouge">version</code> 三个文件。</p> <p>修改 <code class="language-plaintext highlighter-rouge">overleaf.rc</code> 中的内容</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="c">## 设置访问地址（必须！）</span>
<span class="nb">export </span><span class="nv">OVERLEAF_URL</span><span class="o">=</span><span class="s2">"http://&lt;your-server-ip-or-domain&gt;:&lt;your-port&gt;"</span>

<span class="c">## 监听所有 IP（必须！）</span>
<span class="nv">OVERLEAF_LISTEN_IP</span><span class="o">=</span>0.0.0.0

<span class="c">## 设置服务端口（必须！）</span>
<span class="nv">OVERLEAF_PORT</span><span class="o">=</span>&lt;your-port&gt;   <span class="c"># 需要在服务器设置中开放相应的端口</span>

<span class="c">## 设置管理员邮箱（必须！）</span>
<span class="nb">export </span><span class="nv">OVERLEAF_ADMIN_EMAIL</span><span class="o">=</span><span class="s2">"your-admin-email@example.com"</span>

<span class="c">## 关闭公开注册（可选）</span>
<span class="c"># export OVERLEAF_SIGNUPS_ENABLED=false</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>修改 <code class="language-plaintext highlighter-rouge">variables.env</code> 中的内容</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="c">## 设置 Overleaf 实例在系统内部的应用名称（用于日志、后台管理等）</span>
<span class="nv">OVERLEAF_APP_NAME</span><span class="o">=</span><span class="s2">"Your Custom Overleaf Instance"</span>

<span class="c">## 设置用户访问该 Overleaf 实例的完整公网 URL（必须包含协议、IP/域名、端口）</span>
<span class="nv">OVERLEAF_SITE_URL</span><span class="o">=</span>http://&lt;your-server-ip-or-domain&gt;:&lt;your-port&gt;

<span class="c">## 设置网页顶部导航栏或浏览器标签页中显示的标题（用户可见的品牌标识）</span>
<span class="nv">OVERLEAF_NAV_TITLE</span><span class="o">=</span>Your Custom Overleaf Instance

<span class="c">## 设置管理员联系邮箱（用于接收系统通知、用户联系、密码重置等）</span>
<span class="nv">OVERLEAF_ADMIN_EMAIL</span><span class="o">=</span>your-admin-email@example.com

<span class="c">## （可选）自定义页面顶部 Logo 图片地址，当前注释表示使用默认样式</span>
<span class="c"># OVERLEAF_HEADER_IMAGE_URL=http://example.com/logo.png</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>修改 <code class="language-plaintext highlighter-rouge">lib/docker-compose.base.yml</code> 中的内容，将 <code class="language-plaintext highlighter-rouge">image: "${IMAGE}</code> 修改为 <code class="language-plaintext highlighter-rouge">image: "sharelatex/sharelatex:latest"</code>。</p> <p>接下来启动服务</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>bin/up
</pre></td></tr></tbody></table></code></pre></figure> <p>现在会看到来自 docker 容器的一些日志输出，表示正在拉取镜像，后续会自动运行容器。如果在终端上按下 <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">c</code>，服务将关闭，可以通过命令 <code class="language-plaintext highlighter-rouge">bin/start</code> 来重新启动它们（不附加到日志输出）。</p> <h2 id="安装完整的-texlive">安装完整的 texlive</h2> <p>社区版使用的 texlive 是最小安装的 texlive ，需要将其升级到完整版。</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="c"># 进入容器</span>
bin/shell
<span class="c"># 查看版本</span>
tlmgr <span class="nt">--version</span>
<span class="c"># 更换镜像源，我用腾讯云的镜像</span>
tlmgr option repository http://mirrors.cloud.tencent.com/CTAN/systems/texlive/tlnet
<span class="c"># 查看</span>
tlmgr option show repository

<span class="c"># 在你选择的镜像站里，找到升级脚本</span>
<span class="nb">cd</span> ~
wget http://mirrors.cloud.tencent.com/CTAN/systems/texlive/tlnet/update-tlmgr-latest.sh

<span class="nb">chmod</span> +x update-tlmgr-latest.sh
./update update-tlmgr-latest.sh

<span class="c"># 更新</span>
tlmgr update <span class="nt">--self</span> <span class="nt">--all</span> 

<span class="c"># 安装完整的包，要花挺长一段时间，尽量选速度快的源</span>
tlmgr <span class="nb">install </span>scheme-full

<span class="c"># 重启容器</span>
bin/stop 
bin/start
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="安装中文字体">安装中文字体</h2> <p>将本地的中文字体复制到服务器，Windows 系统的的字体储存在 <code class="language-plaintext highlighter-rouge">C:\windows\Fonts</code> 目录，将其复制到服务器的 <code class="language-plaintext highlighter-rouge">/root/Fonts</code> 目录后，在服务器内完成安装</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="c"># 进入Fonts目录</span>
<span class="nb">cd </span>Fonts/

<span class="c"># 删除其中的.fon字体文件(否则可能会报错)</span>
<span class="nb">rm</span> <span class="nt">-r</span> <span class="k">*</span>.fon

<span class="c"># 返回上层目录并打包</span>
<span class="nb">cd</span> ..
<span class="nb">tar</span> <span class="nt">-zcvf</span> winfonts.tar.gz Fonts/

<span class="c"># 把压缩文件传到sharelatex容器的root目录下</span>
docker <span class="nb">cp </span>winfonts.tar.gz sharelatex:/root

<span class="c"># 进入容器的命令行界面</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> sharelatex bash

<span class="c"># 在容器内更新软件包列表</span>
apt-get update

<span class="c"># 通过安装wqy字体同时安装xfont工具</span>
apt-get <span class="nb">install </span>xfonts-wqy

<span class="c"># 进入root目录，解压winfonts.tar.gz，并移动到系统字体目录下</span>
<span class="nb">cd</span> ~
<span class="nb">tar</span> <span class="nt">-zxvf</span> winfonts.tar.gz
<span class="nb">mv </span>Fonts /usr/share/fonts/

<span class="c"># 进入字体目录安装字体</span>
<span class="nb">cd</span> /usr/share/fonts/Fonts
mkfontscale
mkfontdir
fc-cache <span class="nt">-fv</span>

<span class="c"># 检查确认中文字体安装成功</span>
fc-list :lang<span class="o">=</span>zh-cn
<span class="c"># 此时会出现已经安装的中文字体</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>重启服务</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre>bin/stop
bin/up
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="清除原有镜像与容器">清除原有镜像与容器</h2> <p>有时，我们会不小心安装错误的镜像，这个时候我们需要确保旧的、错误的镜像和容器被完全清除。</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="c"># 停止当前所有服务</span>
<span class="nb">cd</span> ~/overleaf-toolkit
bin/stop

<span class="c"># 列出所有与项目相关的容器</span>
<span class="c"># 通常容器名会包含 "overleaf" 或 "sharelatex"</span>
docker ps <span class="nt">-a</span> <span class="nt">--filter</span> <span class="s2">"name=overleaf"</span> <span class="nt">--filter</span> <span class="s2">"name=sharelatex"</span>

<span class="c"># 强制删除所有列出的相关容器</span>
<span class="c"># 请将 &lt;CONTAINER_ID_OR_NAME&gt; 替换为上一步命令中列出的实际容器ID或名称</span>
docker <span class="nb">rm</span> <span class="nt">-f</span> &lt;CONTAINER_ID_OR_NAME_1&gt; &lt;CONTAINER_ID_OR_NAME_2&gt;

<span class="c"># 列出所有本地镜像，查找非官方的或可疑的镜像</span>
docker images | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s2">"(sharelatex|overleaf)"</span>

<span class="c"># 删除非官方的自定义镜像</span>
<span class="c"># 请将 &lt;CUSTOM_IMAGE_NAME:TAG&gt; 替换为上一步中找到的、非 "sharelatex/sharelatex:latest" 的镜像</span>
docker rmi &lt;CUSTOM_IMAGE_NAME:TAG&gt;

<span class="c"># （可选）清理所有无用的Docker对象，获得一个纯净的环境</span>
docker system prune <span class="nt">-a</span>
<span class="c"># 系统会提示确认，输入 'y' 并回车。</span>
<span class="c"># 注意：此命令会删除所有未被容器使用的镜像、网络、构建缓存等。</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>之后便可以启动服务</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>bin/up
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="登录">登录</h2> <p>首先访问 <code class="language-plaintext highlighter-rouge">http://&lt;your-server-ip-or-domain&gt;:&lt;your-port&gt;/launchpad</code> 创建管理员，之后便可以访问 <code class="language-plaintext highlighter-rouge">http://&lt;your-server-ip-or-domain&gt;:&lt;your-port&gt;/login</code> 登录用户。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-09-12-overleaf-server/login-480.webp 480w,/assets/img/blogs/2025-09-12-overleaf-server/login-800.webp 800w,/assets/img/blogs/2025-09-12-overleaf-server/login-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-09-12-overleaf-server/login.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 登录界面 </div> <h2 id="添加账户">添加账户</h2> <p>在管理员账户主页，点击 <code class="language-plaintext highlighter-rouge">admin - Manage Users</code> 即可添加账户。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-09-12-overleaf-server/add-users-480.webp 480w,/assets/img/blogs/2025-09-12-overleaf-server/add-users-800.webp 800w,/assets/img/blogs/2025-09-12-overleaf-server/add-users-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-09-12-overleaf-server/add-users.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 管理员添加账户 </div> <p>在输入要添加账户的邮箱后，会为新账户生成一个设置密码链接，访问该链接设置密码即可完成新账户的注册。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-09-12-overleaf-server/register-480.webp 480w,/assets/img/blogs/2025-09-12-overleaf-server/register-800.webp 800w,/assets/img/blogs/2025-09-12-overleaf-server/register-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-09-12-overleaf-server/register.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 设置密码链接 </div> <p>接下来，就可以愉快地使用 overleaf 啦。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-09-12-overleaf-server/example-480.webp 480w,/assets/img/blogs/2025-09-12-overleaf-server/example-800.webp 800w,/assets/img/blogs/2025-09-12-overleaf-server/example-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-09-12-overleaf-server/example.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 使用示例 </div> <h2 id="vs-codecursor--overleaf">VS Code/Cursor + Overleaf</h2> <p>在 VS Code 扩展中搜索插件 <a href="https://github.com/iamhyc/Overleaf-Workshop">Overleaf Workshop</a> ，点击安装。</p> <p>安装成功后，可以在左侧导航栏看到 Overleaf 的 logo。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-09-12-overleaf-server/overleaf-plungin-480.webp 480w,/assets/img/blogs/2025-09-12-overleaf-server/overleaf-plungin-800.webp 800w,/assets/img/blogs/2025-09-12-overleaf-server/overleaf-plungin-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-09-12-overleaf-server/overleaf-plungin.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Overleaf 插件 </div> <p>点击图中所示的加号，将部署的 Overleaf 服务器地址 <code class="language-plaintext highlighter-rouge">http://&lt;your-server-ip-or-domain&gt;:&lt;your-port&gt;</code> 填进框中。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-09-12-overleaf-server/input-url-480.webp 480w,/assets/img/blogs/2025-09-12-overleaf-server/input-url-800.webp 800w,/assets/img/blogs/2025-09-12-overleaf-server/input-url-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-09-12-overleaf-server/input-url.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 输入 Overleaf 服务器地址 </div> <p>在左侧可以进行登录。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-09-12-overleaf-server/sign-in-480.webp 480w,/assets/img/blogs/2025-09-12-overleaf-server/sign-in-800.webp 800w,/assets/img/blogs/2025-09-12-overleaf-server/sign-in-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-09-12-overleaf-server/sign-in.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 登录账户 </div> <p>点击 <code class="language-plaintext highlighter-rouge">Login with Password</code>，根据提示输入账号密码。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-09-12-overleaf-server/input-password-480.webp 480w,/assets/img/blogs/2025-09-12-overleaf-server/input-password-800.webp 800w,/assets/img/blogs/2025-09-12-overleaf-server/input-password-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-09-12-overleaf-server/input-password.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 输入账号密码 </div> <p>点击图中的按钮，便可以使用 VS Code 编辑 LaTeX 项目了。</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-09-12-overleaf-server/open-project-480.webp 480w,/assets/img/blogs/2025-09-12-overleaf-server/open-project-800.webp 800w,/assets/img/blogs/2025-09-12-overleaf-server/open-project-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-09-12-overleaf-server/open-project.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 打开项目 </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blogs/2025-09-12-overleaf-server/edit-project-480.webp 480w,/assets/img/blogs/2025-09-12-overleaf-server/edit-project-800.webp 800w,/assets/img/blogs/2025-09-12-overleaf-server/edit-project-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blogs/2025-09-12-overleaf-server/edit-project.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 编辑项目 </div> <p>在 Cursor 中，我并没有在插件市场搜索到 Overleaf Workshop 插件，这时可以通过手动安装 VSIX 文件的方式来解决这个问题。</p> <p>在 VSCode 中，右键点击已安装的插件 → <code class="language-plaintext highlighter-rouge">Export Extension</code>。在 Cursor 中，按 <code class="language-plaintext highlighter-rouge">Ctrl</code>+<code class="language-plaintext highlighter-rouge">Shift</code>+<code class="language-plaintext highlighter-rouge">P</code> 打开命令面板，输入 <code class="language-plaintext highlighter-rouge">Install from VSIX</code>，选择下载的 <code class="language-plaintext highlighter-rouge">.vsix</code> 文件。安装完成后，重启 Cursor 即可使用。</p> <h2 id="总结">总结</h2> <p>本文提供了一套在国内网络环境下可复用、可维护且体验流畅的 Overleaf 私有部署方案。</p>]]></content><author><name></name></author><category term="工程"/><category term="LaTeX"/><category term="Overleaf"/><category term="云服务器"/><summary type="html"><![CDATA[Overleaf 是全球最受欢迎的在线 LaTeX 编辑平台，但免费版的官方服务会限制编译时间，且项目私密性无法完全保证。本文推荐在自己的云服务器上部署私有 Overleaf 以获得更好的体验。]]></summary></entry><entry><title type="html">GitHub Commits 提交规范</title><link href="https://cresc3nt.github.io/blog/2025/git-commit/" rel="alternate" type="text/html" title="GitHub Commits 提交规范"/><published>2025-09-12T10:00:00+00:00</published><updated>2025-09-12T10:00:00+00:00</updated><id>https://cresc3nt.github.io/blog/2025/git-commit</id><content type="html" xml:base="https://cresc3nt.github.io/blog/2025/git-commit/"><![CDATA[<h2 id="基本格式">基本格式</h2> <p>Conventional Commits 的基本格式如下：</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre>&lt;<span class="nb">type</span><span class="o">&gt;[</span>optional scope]: &lt;description&gt;
<span class="o">[</span>optional body]
<span class="o">[</span>optional footer<span class="o">(</span>s<span class="o">)]</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>其中 <code class="language-plaintext highlighter-rouge">&lt;type&gt;</code> 表示提交类型（必填），也决定了它在 changelog 中的分类，通常有以下几种：</p> <ul> <li><code class="language-plaintext highlighter-rouge">feat</code>: 新功能；</li> <li><code class="language-plaintext highlighter-rouge">fix</code>: 修复 bug；</li> <li><code class="language-plaintext highlighter-rouge">docs</code>: 仅修改文档；</li> <li><code class="language-plaintext highlighter-rouge">style</code>: 不影响代码逻辑的修改，比如格式、空格、缩进、缺失的分号；</li> <li><code class="language-plaintext highlighter-rouge">refactor</code>: 代码重构（不包含功能变更或 bug 修复）；</li> <li><code class="language-plaintext highlighter-rouge">perf</code>: 性能优化；</li> <li><code class="language-plaintext highlighter-rouge">test</code>: 添加测试或修改测试；</li> <li><code class="language-plaintext highlighter-rouge">build</code>: 构建系统或依赖的变动（例如 webpack、rollup）</li> <li><code class="language-plaintext highlighter-rouge">chore</code>: 杂项、不属于其他类型的更改（比如改 .gitignore、更新依赖）；</li> <li><code class="language-plaintext highlighter-rouge">ci</code>: 持续集成相关（GitHub Actions、Travis CI、Circle 等）；</li> <li><code class="language-plaintext highlighter-rouge">revert</code>: 回滚某个提交（会自动生成 footer）。</li> </ul> <p>更多内容请见 <a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits</a> 。</p>]]></content><author><name></name></author><category term="工程"/><category term="Git"/><category term="Conventional Commits"/><summary type="html"><![CDATA[Conventional Commits 是一种规范化的 git 提交信息格式，遵循规范可以有效提升 commit message 的可读性，也方便历史记录和版本控制。]]></summary></entry><entry><title type="html">带有Plotly.js的文章</title><link href="https://cresc3nt.github.io/blog/2025/plotly/" rel="alternate" type="text/html" title="带有Plotly.js的文章"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://cresc3nt.github.io/blog/2025/plotly</id><content type="html" xml:base="https://cresc3nt.github.io/blog/2025/plotly/"><![CDATA[<p>这是一篇包含一些<a href="https://plotly.com/javascript/">Plotly</a>代码的示例文章。</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>效果如下：</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>另一个图表示例：</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "折线图与散点图组合"
    }
  }
}</span>
<span class="p">```</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>效果如下：</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "折线图与散点图组合"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="示例文章"/><category term="格式化"/><category term="图表"/><summary type="html"><![CDATA[这是包含Plotly.js代码的样子]]></summary></entry><entry><title type="html">带有图片画廊的文章</title><link href="https://cresc3nt.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="带有图片画廊的文章"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://cresc3nt.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://cresc3nt.github.io/blog/2024/photo-gallery/"><![CDATA[<p>这篇文章中的图片都是可缩放的，使用不同的库排列成不同的迷你画廊。</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="示例文章"/><category term="格式化"/><category term="图片"/><summary type="html"><![CDATA[这是包含图片画廊的样子]]></summary></entry><entry><title type="html">带有标签页的文章</title><link href="https://cresc3nt.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="带有标签页的文章"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://cresc3nt.github.io/blog/2024/tabs</id><content type="html" xml:base="https://cresc3nt.github.io/blog/2024/tabs/"><![CDATA[<p>这就是带有<a href="https://github.com/Ovski4/jekyll-tabs">标签页</a>的文章的样子。请注意，标签页可以用于不同的目的，不仅仅是代码。</p> <h2 id="第一组标签页">第一组标签页</h2> <p>要添加标签页，请使用以下语法：</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

内容 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

内容 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>通过这种方式，你可以生成如下效果：</p> <ul id="log" class="tab" data-tab="2b380e46-8799-464d-b7ea-29f98de8ea00" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="2b380e46-8799-464d-b7ea-29f98de8ea00" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> </ul> <h2 id="另一个示例">另一个示例</h2> <ul id="data-struct" class="tab" data-tab="038c4f8d-103a-4151-98f9-4cab4c3d1206" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="038c4f8d-103a-4151-98f9-4cab4c3d1206" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</pre></td></tr></tbody></table></code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div> </li> </ul> <h2 id="用于其他内容的标签页">用于其他内容的标签页</h2> <ul id="something-else" class="tab" data-tab="f560f245-dfa9-4a90-80f3-7715f45a04f5" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="f560f245-dfa9-4a90-80f3-7715f45a04f5" data-name="something-else"> <li class="active"> <p>普通文本</p> </li> <li> <blockquote> <p>一段引文</p> </blockquote> </li> <li> <p>文艺青年清单</p> <ul> <li>早午餐</li> <li>复古单车</li> <li>雷朋墨镜</li> <li>邮差包</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="示例文章"/><category term="格式化"/><category term="代码"/><summary type="html"><![CDATA[这是在文章中包含标签页的样子]]></summary></entry></feed>